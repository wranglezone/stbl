% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/to_lst.R
\name{to_lst}
\alias{to_lst}
\alias{to_list}
\alias{to_lst.list}
\alias{to_lst.default}
\alias{to_lst.NULL}
\alias{to_lst.function}
\title{Ensure a list argument meets expectations}
\usage{
to_lst(x, ..., x_arg = caller_arg(x), call = caller_env())

to_list(x, ..., x_arg = caller_arg(x), call = caller_env())

\method{to_lst}{list}(x, ...)

\method{to_lst}{default}(x, ...)

\method{to_lst}{`NULL`}(x, ..., allow_null = TRUE, x_arg = caller_arg(x), call = caller_env())

\method{to_lst}{`function`}(
  x,
  ...,
  coerce_function = FALSE,
  x_arg = caller_arg(x),
  call = caller_env()
)
}
\arguments{
\item{x}{The argument to stabilize.}

\item{...}{Arguments passed to \code{\link[base:list]{base::as.list()}} or other methods.}

\item{x_arg}{\verb{(length-1 character)} An argument name for x. The automatic
value will work in most cases, or pass it through from higher-level
functions to make error messages clearer in unexported functions.}

\item{call}{\code{(environment)} The execution environment to mention as the
source of error messages.}

\item{allow_null}{\verb{(length-1 logical)} Is NULL an acceptable value?}

\item{coerce_function}{\verb{(length-1 logical)} Should functions be coerced?}
}
\value{
The argument as a list.
}
\description{
\code{to_list()} checks whether an argument can be coerced to a list
without losing information, returning it silently if so. Otherwise an
informative error message is signaled. \code{to_lst()} is a synonym of
\code{to_list()}.
}
\details{
This function has three important distinctions from
\code{\link[base:list]{base::as.list()}}:
\itemize{
\item Functions can be rejected as part of the call to this function (with
\code{coerce_function = FALSE}, the default). If they are allowed, they'll be
coerced to a list concatenating their formals and body (as with
\code{\link[base:list]{base::as.list()}}.
\item Primitive functions (such as \code{\link[base:NA]{base::is.na()}} or \code{\link[base:list]{base::is.list()}}) always
throw an error, rather than returning \code{list(NULL)}.
\item \code{NULL} values can be rejected as part of the call to this function (with
\code{allow_null = FALSE}).
}
}
