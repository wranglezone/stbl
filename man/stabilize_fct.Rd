% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stabilize_fct.R, R/to_fct.R
\name{stabilize_fct}
\alias{stabilize_fct}
\alias{stabilize_fct_scalar}
\alias{to_fct}
\alias{to_fct.NULL}
\alias{to_fct_scalar}
\title{Ensure a factor argument meets expectations}
\usage{
stabilize_fct(
  x,
  ...,
  allow_null = TRUE,
  allow_na = TRUE,
  min_size = NULL,
  max_size = NULL,
  levels = NULL,
  to_na = character(),
  x_arg = caller_arg(x),
  call = caller_env(),
  x_class = object_type(x)
)

stabilize_fct_scalar(
  x,
  ...,
  allow_null = TRUE,
  allow_zero_length = TRUE,
  allow_na = TRUE,
  levels = NULL,
  to_na = character(),
  x_arg = caller_arg(x),
  call = caller_env(),
  x_class = object_type(x)
)

to_fct(
  x,
  ...,
  levels = NULL,
  to_na = character(),
  x_arg = caller_arg(x),
  call = caller_env(),
  x_class = object_type(x)
)

\method{to_fct}{`NULL`}(x, ..., allow_null = TRUE, x_arg = caller_arg(x), call = caller_env())

to_fct_scalar(
  x,
  ...,
  allow_null = TRUE,
  allow_zero_length = TRUE,
  levels = NULL,
  to_na = character(),
  x_arg = caller_arg(x),
  call = caller_env(),
  x_class = object_type(x)
)
}
\arguments{
\item{x}{The argument to stabilize.}

\item{...}{Arguments passed to methods.}

\item{allow_null}{\verb{(length-1 logical)} Is NULL an acceptable value?}

\item{allow_na}{\verb{(length-1 logical)} Are NA values ok?}

\item{min_size}{\verb{(length-1 integer)} The minimum size of the object. Object
size will be tested using \code{\link[vctrs:vec_size]{vctrs::vec_size()}}.}

\item{max_size}{\verb{(length-1 integer)} The maximum size of the object. Object
size will be tested using \code{\link[vctrs:vec_size]{vctrs::vec_size()}}.}

\item{levels}{\code{(character)} Expected levels. If \code{NULL} (default), the levels
will be computed by \code{\link[base:factor]{base::factor()}}.}

\item{to_na}{\code{(character)} Values to convert to \code{NA}.}

\item{x_arg}{\verb{(length-1 character)} An argument name for x. The automatic
value will work in most cases, or pass it through from higher-level
functions to make error messages clearer in unexported functions.}

\item{call}{\code{(environment)} The execution environment to mention as the
source of error messages.}

\item{x_class}{\verb{(length-1 character)} The class name of \code{x} to use in error
messages. Use this if you remove a special class from \code{x} before checking
its coercion, but want the error message to match the original class.}

\item{allow_zero_length}{\verb{(length-1 logical)} Are zero-length vectors
acceptable?}
}
\value{
The argument as a factor.
}
\description{
\code{to_fct()} checks whether an argument can be coerced to a factor
without losing information, returning it silently if so. Otherwise an
informative error message is signaled.

\code{stabilize_fct()} can check more details about the argument, but is slower
than \code{to_fct()}.

\code{stabilize_fct_scalar()} and \code{to_fct_scalar()} are optimized to check for
length-1 factors.
}
\details{
These functions have important differences from \code{\link[base:factor]{base::as.factor()}}
and \code{\link[base:factor]{base::factor()}}:
\itemize{
\item Values are never silently coerced to \code{NA} unless they are explicitly
supplied in the \code{to_na} argument.
\item \code{NULL} values can be rejected as part of the call to this function (with
\code{allow_null = FALSE}).
}
}
\examples{
to_fct("a")
to_fct(1:10)
to_fct(NULL)
try(to_fct(letters[1:5], levels = c("a", "c"), to_na = "b"))

to_fct_scalar("a")
try(to_fct_scalar(letters))

stabilize_fct(letters)
try(stabilize_fct(NULL, allow_null = FALSE))
try(stabilize_fct(c("a", NA), allow_na = FALSE))
try(stabilize_fct(c("a", "b", "c"), min_size = 5))
try(stabilize_fct(c("a", "b", "c"), max_size = 2))

stabilize_fct_scalar("a")
try(stabilize_fct_scalar(letters))
try(stabilize_fct_scalar("c", levels = c("a", "b")))
}
\seealso{
Other factor functions: 
\code{\link{are_fct_ish}()},
\code{\link{specify_fct}()}

Other stabilization functions: 
\code{\link{stabilize_arg}()},
\code{\link{stabilize_chr}()},
\code{\link{stabilize_dbl}()},
\code{\link{stabilize_int}()},
\code{\link{stabilize_lgl}()}
}
\concept{factor functions}
\concept{stabilization functions}
