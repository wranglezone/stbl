name: update-ai

on:
  workflow_dispatch:
  push:
    branches: [main]
  issues:
    types:
      - opened
      - edited
      - deleted
      - transferred
      - closed
      - reopened
      - labeled
      - unlabeled
      - milestoned
      - demilestoned
      - typed
      - untyped

permissions:
  contents: write
  issues: read

jobs:
  update-ai:
    runs-on: ubuntu-latest
    steps:
      - name: Set workflow start time
        id: start_time
        run: echo "timestamp=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Initial pause for event flurry
        run: sleep 30s
        shell: bash

      - name: Checkout main branch to get scripts
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.ADMIN_PAT }}
          ref: main

      - name: Make check scripts executable
        run: |
          if [ -f ".github/scripts/check-timestamp.sh" ]; then
            chmod +x .github/scripts/check-timestamp.sh
          fi
          if [ -f ".github/scripts/check-workflow-runs.sh" ]; then
            chmod +x .github/scripts/check-workflow-runs.sh
          fi
        shell: bash

      - name: Install jq
        run: |
          sudo apt-get install -y jq

      - name: Check for newer workflow runs
        id: check_changes_1
        env:
          GITHUB_TOKEN: ${{ secrets.ADMIN_PAT }} # Use PAT for gh API calls
          GITHUB_RUN_ID: ${{ github.run_id }}
        run: |
          bash .github/scripts/check-workflow-runs.sh >> $GITHUB_OUTPUT
        shell: bash

      - name: Setup R
        id: setup-r
        if: steps.check_changes_1.outputs.changes == 'true'
        uses: r-lib/actions/setup-r@v2

      - name: Cache R packages
        if: steps.check_changes_1.outputs.changes == 'true'
        uses: actions/cache@v4
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-r-${{ steps.setup-r.outputs.r-version }}-pkgs-v1
          restore-keys: |
            ${{ runner.os }}-r-${{ steps.setup-r.outputs.r-version }}-pkgs-

      - name: Install system dependencies
        if: steps.check_changes_1.outputs.changes == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev libssl-dev jq

      - name: Install R script dependencies
        if: steps.check_changes_1.outputs.changes == 'true'
        run: |
          install.packages("pak", repos = "https://r-lib.github.io/p/pak/stable")
          pak::pak(c("gh", "glue", "purrr", "jsonlite"))
        shell: Rscript {0}

      - name: Check for changes after setup
        if: steps.check_changes_1.outputs.changes == 'true'
        id: check_changes_2
        run: |
          bash .github/scripts/check-timestamp.sh ${{ steps.start_time.outputs.timestamp }} >> $GITHUB_OUTPUT
        shell: bash

      - name: Checkout latest main before running script
        if: steps.check_changes_2.outputs.changes == 'true'
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.ADMIN_PAT }}
          ref: main

      - name: Run script to fetch issues
        if: steps.check_changes_2.outputs.changes == 'true'
        run: Rscript .github/scripts/fetch-issues.R
        env:
          GITHUB_TOKEN: ${{ secrets.ADMIN_PAT }}

      - name: Commit and push changes to ai branch
        if: steps.check_changes_2.outputs.changes == 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          # Create a new 'ai' branch from the current HEAD (main) or reset the existing one.
          git checkout -B ai
          git add .github/ai/issues.json
          git diff --staged --quiet || git commit -m "chore: Update issues.json"
          # Force push the 'ai' branch to the remote, overwriting its history.
          git push --force origin ai
