[{"path":[]},{"path":"https://stbl.wrangle.zone/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://stbl.wrangle.zone/dev/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://stbl.wrangle.zone/dev/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://stbl.wrangle.zone/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://stbl.wrangle.zone/dev/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement jonthegeek@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://stbl.wrangle.zone/dev/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://stbl.wrangle.zone/dev/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://stbl.wrangle.zone/dev/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://stbl.wrangle.zone/dev/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://stbl.wrangle.zone/dev/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://stbl.wrangle.zone/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://stbl.wrangle.zone/dev/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to stbl","title":"Contributing to stbl","text":"outlines propose change stbl.","code":""},{"path":"https://stbl.wrangle.zone/dev/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to stbl","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://stbl.wrangle.zone/dev/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to stbl","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://stbl.wrangle.zone/dev/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to stbl","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"wranglezone/stbl\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://stbl.wrangle.zone/dev/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to stbl","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://stbl.wrangle.zone/dev/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to stbl","text":"Please note stbl project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://stbl.wrangle.zone/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 stbl authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://stbl.wrangle.zone/dev/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with stbl","title":"Getting help with stbl","text":"Thanks using stbl! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https://stbl.wrangle.zone/dev/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with stbl","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"https://stbl.wrangle.zone/dev/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with stbl","text":"Armed reprex, next step figure ask. ’s question: ’s best ask Data Science Learning Community Slack. options include Posit Community, StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"https://stbl.wrangle.zone/dev/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with stbl","text":"’ll try look issue soon can, packages maintained volunteers. good reprex particularly important might weeks months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":"https://stbl.wrangle.zone/dev/articles/stbl.html","id":"the-register_user-function","dir":"Articles","previous_headings":"","what":"The register_user() Function","title":"Getting started with stbl","text":"base function ’ll improving. Without checks, ’s vulnerable bad inputs cause cryptic errors later send corrupt data external service.","code":"register_user <- function(username,                           email_address,                           age,                           is_premium_member,                           interests) {   # Imagine this is a slow API call, rather than simply returning the list()   list(     username = username,     email_address = email_address,     age = age,     is_premium_member = is_premium_member,     interests = interests   ) }"},{"path":"https://stbl.wrangle.zone/dev/articles/stbl.html","id":"step-1-handling-a-vector-with-to_","dir":"Articles","previous_headings":"","what":"Step 1: Handling a Vector with to_*()","title":"Getting started with stbl","text":"Let’s start adding checks. first check interests argument. expect character vector, ’re picky content. to_chr() convert inputs character-like (like factors simple list strings) proper character vector. function still returns list interests character vector: also works interests list strings: input something reasonably flattened character vector, fails helpful error message:","code":"register_user <- function(username,                           email_address,                           age,                           is_premium_member,                           interests) {   interests <- to_chr(interests)    list(     username = username,     email_address = email_address,     age = age,     is_premium_member = is_premium_member,     interests = interests   ) } register_user(   username = \"test_user\",    email_address = \"test@example.com\",    age = 42,    is_premium_member = TRUE,    interests = c(\"R\", \"hiking\")    # Note that this is already a character vector ) |>    # Note: Throughout this article, we pipe the result into `str()` to make it   # easier to see the differences.   str() #> List of 5 #>  $ username         : chr \"test_user\" #>  $ email_address    : chr \"test@example.com\" #>  $ age              : num 42 #>  $ is_premium_member: logi TRUE #>  $ interests        : chr [1:2] \"R\" \"hiking\" register_user(   username = \"test_user\",    email_address = \"test@example.com\",    age = 42,    is_premium_member = TRUE,    interests = list(\"R\", \"hiking\") # This is a list, but becomes a character vector ) |> str() #> List of 5 #>  $ username         : chr \"test_user\" #>  $ email_address    : chr \"test@example.com\" #>  $ age              : num 42 #>  $ is_premium_member: logi TRUE #>  $ interests        : chr [1:2] \"R\" \"hiking\" # Fails because the list contains a function, which is not character-like. register_user(   username = \"test_user\",    email_address = \"test@example.com\",    age = 42,    is_premium_member = TRUE,    interests = list(\"R\", mean) ) #> Error in `register_user()`: #> ! Can't coerce `interests` <list> to <character>."},{"path":"https://stbl.wrangle.zone/dev/articles/stbl.html","id":"step-2-simple-scalar-coercion-with-to__scalar","dir":"Articles","previous_headings":"","what":"Step 2: Simple Scalar Coercion with to_*_scalar()","title":"Getting started with stbl","text":"Next, ’ll add checks age is_premium_member. arguments must contain single value. ’ll use _scalar variants: to_int_scalar() to_lgl_scalar(). functions liberal accept. example, to_lgl_scalar() understands 1, \"T\", \"True\" mean TRUE. everything follows rules, register_user() works: register_user() function fail clear error messages input isn’t single value can’t coerced. example, age single value, register_user() throws error: Likewise, next example fails “forty-two” converted integer:","code":"register_user <- function(username,                           email_address,                           age,                           is_premium_member,                           interests) {   interests <- to_chr(interests)   age <- to_int_scalar(age)   is_premium_member <- to_lgl_scalar(is_premium_member)    list(     username = username,     email_address = email_address,     age = age,     is_premium_member = is_premium_member,     interests = interests   ) } register_user(   username = \"test_user\",    email_address = \"test@example.com\",    age = \"42\",                 # Coercible to integer   is_premium_member = \"True\", # Coercible to logical   interests = c(\"R\", \"hiking\") ) |> str() #> List of 5 #>  $ username         : chr \"test_user\" #>  $ email_address    : chr \"test@example.com\" #>  $ age              : int 42 #>  $ is_premium_member: logi TRUE #>  $ interests        : chr [1:2] \"R\" \"hiking\" register_user(   username = \"test_user\",    email_address = \"test@example.com\",    age = c(30, 31),            # Not a single value   is_premium_member = TRUE,    interests = c(\"R\", \"hiking\") ) #> Error in `register_user()`: #> ! `age` must be a single <integer>. #> ✖ `age` has 2 values. register_user(   username = \"test_user\",    email_address = \"test@example.com\",    age = \"forty-two\",          # Not coercible to integer   is_premium_member = TRUE,    interests = c(\"R\", \"hiking\") ) #> Error in `register_user()`: #> ! `age` <character> must be coercible to <integer> #> ✖ Can't convert some values due to incompatible values. #> • Locations: 1"},{"path":"https://stbl.wrangle.zone/dev/articles/stbl.html","id":"step-3-complex-validation-with-stabilize_","dir":"Articles","previous_headings":"","what":"Step 3: Complex Validation with stabilize_*()","title":"Getting started with stbl","text":"Finally, let’s add complex validation username email_address. , simple type coercion isn’t enough; need check content structure using stabilize_chr_scalar(). function first coerces input character, applies list validation rules supplied via regex argument (see stabilize_chr() documentation details). speed matters, prefer faster to_*() functions “upgrade” stabilize_*() need additional checks. final, fully stabilized function: inputs follow expectations, call succeeds: anything wrong, fails informative error messages. username space, register_user() fails informative error message: example fails email address invalid:","code":"register_user <- function(username,                           email_address,                           age,                           is_premium_member,                           interests) {   # Simple checks.   interests <- to_chr(interests)   age <- to_int_scalar(age)   is_premium_member <- to_lgl_scalar(is_premium_member)    # Make sure the username is a length-1 character vector without any spaces,   # tabs, or newlines. \"\\\\s\" means \"any space character\".   space_regex <- c(\"must not contain spaces\" = \"\\\\s\")   attr(space_regex, \"negate\") <- TRUE   username <- stabilize_chr_scalar(     username,     regex = space_regex   )    # The email address has to have the pattern \"*@*.*\". Or, in regex, \"^\" (start   # of string), \"[...]+\" (one or more of any character in the brackets), \"@\"   # (the at sign), \"[...]+\" (one or more of any character in the brackets),   # \"\\\\.\" (a literal period), \"[...]{2,}\" (two or more of any character in the   # brackets), \"$\" (end of string).   email_regex <- \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\"   email_address <- stabilize_chr_scalar(     email_address,     regex = c(\"must be a valid email address\" = email_regex)   )    list(     username = username,     email_address = email_address,     age = age,     is_premium_member = is_premium_member,     interests = interests   ) } register_user(   username = \"test_user\",    email_address = \"test@example.com\",    age = 42,    is_premium_member = TRUE,    interests = c(\"R\", \"hiking\") ) |> str() #> List of 5 #>  $ username         : chr \"test_user\" #>  $ email_address    : chr \"test@example.com\" #>  $ age              : int 42 #>  $ is_premium_member: logi TRUE #>  $ interests        : chr [1:2] \"R\" \"hiking\" register_user(   username = \"test user\",    email_address = \"test@example.com\",    age = 42,    is_premium_member = TRUE,    interests = c(\"R\", \"hiking\") ) #> Error in `register_user()`: #> ! `username` must not contain spaces #> ✖ \"test user\" fails the check. register_user(   username = \"test_user\",    email_address = \"not-a-valid-email\",    age = 42,    is_premium_member = TRUE,    interests = c(\"R\", \"hiking\") ) #> Error in `register_user()`: #> ! `email_address` must be a valid email address #> ✖ \"not-a-valid-email\" fails the check."},{"path":"https://stbl.wrangle.zone/dev/articles/stbl.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Getting started with stbl","text":"register_user() function now robust variety bad inputs. ’ve built layers protection: to_chr() ensures interests character vector. to_int_scalar() to_lgl_scalar() ensure age is_premium_member single values correct type. stabilize_chr_scalar() regex rules ensures username email_address meet specific content requirements. user enters something strange, ’ll get clear error message anything expensive, like calling external API.","code":""},{"path":"https://stbl.wrangle.zone/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jon Harmon. Author, maintainer, copyright holder.","code":""},{"path":"https://stbl.wrangle.zone/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Harmon J (2025). stbl: Stabilize Function Arguments. R package version 0.2.0.9004, https://stbl.wrangle.zone/.","code":"@Manual{,   title = {stbl: Stabilize Function Arguments},   author = {Jon Harmon},   year = {2025},   note = {R package version 0.2.0.9004},   url = {https://stbl.wrangle.zone/}, }"},{"path":"https://stbl.wrangle.zone/dev/index.html","id":"stbl","dir":"","previous_headings":"","what":"Stabilize Function Arguments","title":"Stabilize Function Arguments","text":"R flexible classes. Variables declared explicit classes, arguments “wrong” class don’t cause errors explicitly fail point call stack. helpful keep flexibility user standpoint, error informatively quickly inputs work computation. purpose stbl allow programmers specify want, see user supplied can work purpose. approach aligns Postel’s Law: “conservative send. liberal accept others.” stbl liberal accepts (coercing safe) conservative returns (ensuring inputs classes features expected).","code":""},{"path":"https://stbl.wrangle.zone/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Stabilize Function Arguments","text":"Install released version stbl CRAN: Install development version stbl GitHub:","code":"install.packages(\"stbl\") # install.packages(\"pak\") pak::pak(\"wranglezone/stbl\")"},{"path":"https://stbl.wrangle.zone/dev/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Stabilize Function Arguments","text":"primary use-case stbl stabilize function arguments. goal make sure arguments work way expect work, give meaningful error messages won’t. example, perhaps like protect case data properly translated character integer ’s loaded user.","code":""},{"path":"https://stbl.wrangle.zone/dev/index.html","id":"without-stbl","dir":"","previous_headings":"Usage","what":"Without stbl:","title":"Stabilize Function Arguments","text":"Without argument-stabilizers provided stbl, error messages can cryptic, errors trigger might want .","code":"my_old_fun <- function(my_arg_name) {   my_arg_name + 1 } my_old_fun(\"1\") #> Error in my_arg_name + 1: non-numeric argument to binary operator"},{"path":"https://stbl.wrangle.zone/dev/index.html","id":"with-stbl","dir":"","previous_headings":"Usage","what":"With stbl:","title":"Stabilize Function Arguments","text":"stbl helps ensure arguments expect . Failures reported helpful messages. errors help locate issues within vectors. See vignette(\"stbl\") learn use stbl, “upgrade” to_*() functions stabilize_*() functions.","code":"my_fun <- function(my_arg_name) {   my_arg_name <- stbl::to_int(my_arg_name)   my_arg_name + 1 } my_fun(\"1\") #> [1] 2 my_fun(\"1.1\") #> Error in `my_fun()`: #> ! `my_arg_name` <character> must be coercible to <integer> #> ✖ Can't convert some values due to loss of precision. #> • Locations: 1 my_fun(c(\"1\", \"2\", \"3.1\", \"4\", \"5.2\")) #> Error in `my_fun()`: #> ! `my_arg_name` <character> must be coercible to <integer> #> ✖ Can't convert some values due to loss of precision. #> • Locations: 3 and 5"},{"path":"https://stbl.wrangle.zone/dev/index.html","id":"similar-packages","dir":"","previous_headings":"","what":"Similar Packages","title":"Stabilize Function Arguments","text":"packages perform functions similar stbl, different approaches: {checkmate} related assertion packages: stbl’s to_*() stabilize_*() functions similar assert*ish() functions {checkmate} coerce = TRUE. stbl usually faster, provided classed error messages allow handle different failure modes differently. {vctrs}: {vctrs} provides strict, low-level tools coercion type consistency, especially useful package internals base-type enforcement. stbl tolerant higher-level, optimized use functions accept flexible user inputs (e.g. letting version number 1.1 passed numeric character handling gracefully).","code":""},{"path":"https://stbl.wrangle.zone/dev/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Stabilize Function Arguments","text":"Please note stbl project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/are_chr_ish.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object can be safely coerced to character — are_chr_ish","title":"Check if an object can be safely coerced to character — are_chr_ish","text":"are_chr_ish() vectorized predicate function checks whether element input can safely coerced character vector. is_chr_ish() scalar predicate function checks elements input can safely coerced character vector.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/are_chr_ish.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object can be safely coerced to character — are_chr_ish","text":"","code":"are_chr_ish(x, ...)  is_chr_ish(x, ...)  # Default S3 method are_chr_ish(x, ..., depth = 1)"},{"path":"https://stbl.wrangle.zone/dev/reference/are_chr_ish.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object can be safely coerced to character — are_chr_ish","text":"x object check. ... Arguments passed methods. depth (length-1 integer) Current recursion depth. manually set parameter.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/are_chr_ish.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object can be safely coerced to character — are_chr_ish","text":"are_chr_ish() returns logical vector length input. is_chr_ish() returns length-1 logical (TRUE FALSE) entire vector.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/are_chr_ish.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an object can be safely coerced to character — are_chr_ish","text":"","code":"are_chr_ish(letters) #>  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE #> [16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE is_chr_ish(letters) #> [1] TRUE  are_chr_ish(1:10) #>  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE is_chr_ish(1:10) #> [1] TRUE  are_chr_ish(list(\"a\", 1, TRUE)) #> [1] TRUE TRUE TRUE is_chr_ish(list(\"a\", 1, TRUE)) #> [1] TRUE  are_chr_ish(list(\"a\", 1, list(1, 2))) #> [1]  TRUE  TRUE FALSE is_chr_ish(list(\"a\", 1, list(1, 2))) #> [1] FALSE"},{"path":"https://stbl.wrangle.zone/dev/reference/are_dbl_ish.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object can be safely coerced to double — are_dbl_ish","title":"Check if an object can be safely coerced to double — are_dbl_ish","text":"are_dbl_ish() vectorized predicate function checks whether element input can safely coerced double vector. is_dbl_ish() scalar predicate function checks elements input can safely coerced double vector.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/are_dbl_ish.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object can be safely coerced to double — are_dbl_ish","text":"","code":"are_dbl_ish(x, ...)  is_dbl_ish(x, ...)  # S3 method for class 'character' are_dbl_ish(x, ..., coerce_character = TRUE)  # S3 method for class 'factor' are_dbl_ish(x, ..., coerce_factor = TRUE)  # Default S3 method are_dbl_ish(x, ..., depth = 1)"},{"path":"https://stbl.wrangle.zone/dev/reference/are_dbl_ish.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object can be safely coerced to double — are_dbl_ish","text":"x object check. ... Arguments passed methods. coerce_character (length-1 logical) character vectors \"1\" \"2.0\" considered numeric-ish? coerce_factor (length-1 logical) factors values \"1\" \"2.0\" considered numeric-ish? Note package uses character value factor, .integer() .double() use integer index factor. depth (length-1 integer) Current recursion depth. manually set parameter.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/are_dbl_ish.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object can be safely coerced to double — are_dbl_ish","text":"are_dbl_ish() returns logical vector length input. is_dbl_ish() returns length-1 logical (TRUE FALSE) entire vector.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/are_dbl_ish.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an object can be safely coerced to double — are_dbl_ish","text":"","code":"are_dbl_ish(c(1.0, 2.2, 3.14)) #> [1] TRUE TRUE TRUE is_dbl_ish(c(1.0, 2.2, 3.14)) #> [1] TRUE  are_dbl_ish(1:3) #> [1] TRUE TRUE TRUE is_dbl_ish(1:3) #> [1] TRUE  are_dbl_ish(c(\"1.1\", \"2.2\", NA)) #> [1] TRUE TRUE TRUE is_dbl_ish(c(\"1.1\", \"2.2\", NA)) #> [1] TRUE  are_dbl_ish(c(\"a\", \"1.0\")) #> [1] FALSE  TRUE is_dbl_ish(c(\"a\", \"1.0\")) #> [1] FALSE  are_dbl_ish(list(1, \"2.2\", \"c\")) #> [1]  TRUE  TRUE FALSE is_dbl_ish(list(1, \"2.2\", \"c\")) #> [1] FALSE  are_dbl_ish(c(1 + 1i, 1 + 0i, NA)) #> [1] FALSE  TRUE  TRUE is_dbl_ish(c(1 + 1i, 1 + 0i, NA)) #> [1] FALSE"},{"path":"https://stbl.wrangle.zone/dev/reference/are_fct_ish.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object can be safely coerced to a factor — are_fct_ish","title":"Check if an object can be safely coerced to a factor — are_fct_ish","text":"are_fct_ish() vectorized predicate function checks whether element input can safely coerced factor. is_fct_ish() scalar predicate function checks elements input can safely coerced factor.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/are_fct_ish.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object can be safely coerced to a factor — are_fct_ish","text":"","code":"are_fct_ish(x, ..., levels = NULL, to_na = character())  is_fct_ish(x, ...)  # Default S3 method are_fct_ish(x, ..., levels = NULL, to_na = character(), depth = 1)"},{"path":"https://stbl.wrangle.zone/dev/reference/are_fct_ish.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object can be safely coerced to a factor — are_fct_ish","text":"x object check. ... Arguments passed methods. levels (character) desired factor levels. to_na (character) Values convert NA. depth (length-1 integer) Current recursion depth. manually set parameter.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/are_fct_ish.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object can be safely coerced to a factor — are_fct_ish","text":"are_fct_ish() returns logical vector length input. is_fct_ish() returns length-1 logical (TRUE FALSE) entire vector.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/are_fct_ish.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an object can be safely coerced to a factor — are_fct_ish","text":"","code":"# When `levels` is `NULL`, atomic vectors are fct_ish, but nested lists are not. are_fct_ish(c(\"a\", 1, NA)) #> [1] TRUE TRUE TRUE is_fct_ish(c(\"a\", 1, NA)) #> [1] TRUE are_fct_ish(list(\"a\", list(\"b\", \"c\"))) #> [1]  TRUE FALSE is_fct_ish(list(\"a\", list(\"b\", \"c\"))) #> [1] FALSE  # When `levels` is specified, values must be in `levels` or `to_na`. are_fct_ish(c(\"a\", \"b\", \"c\"), levels = c(\"a\", \"b\")) #> [1]  TRUE  TRUE FALSE is_fct_ish(c(\"a\", \"b\", \"c\"), levels = c(\"a\", \"b\")) #> [1] FALSE  # The `to_na` argument allows some values to be treated as `NA`. are_fct_ish(c(\"a\", \"b\", \"z\"), levels = c(\"a\", \"b\"), to_na = \"z\") #> [1] TRUE TRUE TRUE is_fct_ish(c(\"a\", \"b\", \"z\"), levels = c(\"a\", \"b\"), to_na = \"z\") #> [1] TRUE  # Factors are also checked against the specified levels. are_fct_ish(factor(c(\"a\", \"b\", \"c\")), levels = c(\"a\", \"b\")) #> [1]  TRUE  TRUE FALSE is_fct_ish(factor(c(\"a\", \"b\", \"c\")), levels = c(\"a\", \"b\")) #> [1] FALSE"},{"path":"https://stbl.wrangle.zone/dev/reference/are_int_ish.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object can be safely coerced to integer — are_int_ish","title":"Check if an object can be safely coerced to integer — are_int_ish","text":"are_int_ish() vectorized predicate function checks whether element input can safely coerced integer vector. is_int_ish() scalar predicate function checks elements input can safely coerced integer vector.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/are_int_ish.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object can be safely coerced to integer — are_int_ish","text":"","code":"are_int_ish(x, ...)  is_int_ish(x, ...)  # S3 method for class 'character' are_int_ish(x, ..., coerce_character = TRUE)  # S3 method for class 'factor' are_int_ish(x, ..., coerce_factor = TRUE)  # Default S3 method are_int_ish(x, ..., depth = 1)"},{"path":"https://stbl.wrangle.zone/dev/reference/are_int_ish.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object can be safely coerced to integer — are_int_ish","text":"x object check. ... Arguments passed methods. coerce_character (length-1 logical) character vectors \"1\" \"2.0\" considered numeric-ish? coerce_factor (length-1 logical) factors values \"1\" \"2.0\" considered numeric-ish? Note package uses character value factor, .integer() .double() use integer index factor. depth (length-1 integer) Current recursion depth. manually set parameter.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/are_int_ish.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object can be safely coerced to integer — are_int_ish","text":"are_int_ish() returns logical vector length input. is_int_ish() returns length-1 logical (TRUE FALSE) entire vector.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/are_int_ish.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an object can be safely coerced to integer — are_int_ish","text":"","code":"are_int_ish(1:4) #> [1] TRUE TRUE TRUE TRUE is_int_ish(1:4) #> [1] TRUE  are_int_ish(c(1.0, 2.0, 3.00000)) #> [1] TRUE TRUE TRUE is_int_ish(c(1.0, 2.0, 3.00000)) #> [1] TRUE  are_int_ish(c(\"1.0\", \"2.0\", \"3.00000\")) #> [1] TRUE TRUE TRUE is_int_ish(c(\"1.0\", \"2.0\", \"3.00000\")) #> [1] TRUE  are_int_ish(c(1, 2.2, NA)) #> [1]  TRUE FALSE  TRUE is_int_ish(c(1, 2.2, NA)) #> [1] FALSE  are_int_ish(c(\"1\", \"1.0\", \"1.1\", \"a\")) #> [1]  TRUE  TRUE FALSE FALSE is_int_ish(c(\"1\", \"1.0\", \"1.1\", \"a\")) #> [1] FALSE  are_int_ish(factor(c(\"1\", \"a\"))) #> [1]  TRUE FALSE is_int_ish(factor(c(\"1\", \"a\"))) #> [1] FALSE"},{"path":"https://stbl.wrangle.zone/dev/reference/are_lgl_ish.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object can be safely coerced to logical — are_lgl_ish","title":"Check if an object can be safely coerced to logical — are_lgl_ish","text":"are_lgl_ish() vectorized predicate function checks whether element input can safely coerced logical vector. is_lgl_ish() scalar predicate function checks elements input can safely coerced logical vector.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/are_lgl_ish.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object can be safely coerced to logical — are_lgl_ish","text":"","code":"are_lgl_ish(x, ...)  is_lgl_ish(x, ...)  # Default S3 method are_lgl_ish(x, ..., depth = 1)"},{"path":"https://stbl.wrangle.zone/dev/reference/are_lgl_ish.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object can be safely coerced to logical — are_lgl_ish","text":"x object check. ... Arguments passed methods. depth (length-1 integer) Current recursion depth. manually set parameter.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/are_lgl_ish.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object can be safely coerced to logical — are_lgl_ish","text":"are_lgl_ish() returns logical vector length input. is_lgl_ish() returns length-1 logical (TRUE FALSE) entire vector.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/are_lgl_ish.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an object can be safely coerced to logical — are_lgl_ish","text":"","code":"are_lgl_ish(c(TRUE, FALSE, NA)) #> [1] TRUE TRUE TRUE is_lgl_ish(c(TRUE, FALSE, NA)) #> [1] TRUE  are_lgl_ish(c(1, 0, 1.0, NA)) #> [1] TRUE TRUE TRUE TRUE is_lgl_ish(c(1, 0, 1.0, NA)) #> [1] TRUE  are_lgl_ish(c(\"T\", \"F\", \"TRUE\", \"FALSE\", \"true\", \"false\", \"1\", \"0\")) #> [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE is_lgl_ish(c(\"T\", \"F\", \"TRUE\", \"FALSE\", \"true\", \"false\", \"1\", \"0\")) #> [1] TRUE  are_lgl_ish(c(\"T\", \"F\", \"a\", \"1.1\")) #> [1]  TRUE  TRUE FALSE  TRUE is_lgl_ish(c(\"T\", \"F\", \"a\", \"1.1\")) #> [1] FALSE  are_lgl_ish(factor(c(\"T\", \"a\"))) #> [1]  TRUE FALSE is_lgl_ish(factor(c(\"T\", \"a\"))) #> [1] FALSE  are_lgl_ish(list(TRUE, 0, \"F\", \"a\")) #> [1]  TRUE  TRUE  TRUE FALSE is_lgl_ish(list(TRUE, 0, \"F\", \"a\")) #> [1] FALSE"},{"path":"https://stbl.wrangle.zone/dev/reference/dot-apply_regex_rule.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a single regex rule to a character vector — .apply_regex_rule","title":"Apply a single regex rule to a character vector — .apply_regex_rule","text":"Apply single regex rule character vector","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-apply_regex_rule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a single regex rule to a character vector — .apply_regex_rule","text":"","code":".apply_regex_rule(rule, x, x_arg, call)"},{"path":"https://stbl.wrangle.zone/dev/reference/dot-apply_regex_rule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a single regex rule to a character vector — .apply_regex_rule","text":"rule (length-1 character) regex rule (possibly name negate attribute). x argument stabilize. x_arg (length-1 character) argument name x. automatic value work cases, pass higher-level functions make error messages clearer unexported functions. call (environment) execution environment mention source error messages.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-apply_regex_rule.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a single regex rule to a character vector — .apply_regex_rule","text":"character vector error messages rule fails, otherwise NULL.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-are_not_dbl_ish_chr.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for character to double coercion failures — .are_not_dbl_ish_chr","title":"Check for character to double coercion failures — .are_not_dbl_ish_chr","text":"Check character double coercion failures","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-are_not_dbl_ish_chr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for character to double coercion failures — .are_not_dbl_ish_chr","text":"","code":".are_not_dbl_ish_chr(x)"},{"path":"https://stbl.wrangle.zone/dev/reference/dot-are_not_dbl_ish_chr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for character to double coercion failures — .are_not_dbl_ish_chr","text":"x object check.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-are_not_dbl_ish_chr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for character to double coercion failures — .are_not_dbl_ish_chr","text":"logical vector TRUE indicates failure.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-are_not_fct_ish_chr.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for values that would be lost during factor coercion — .are_not_fct_ish_chr","title":"Check for values that would be lost during factor coercion — .are_not_fct_ish_chr","text":"Check values lost factor coercion","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-are_not_fct_ish_chr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for values that would be lost during factor coercion — .are_not_fct_ish_chr","text":"","code":".are_not_fct_ish_chr(x, levels, to_na = character())"},{"path":"https://stbl.wrangle.zone/dev/reference/dot-are_not_fct_ish_chr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for values that would be lost during factor coercion — .are_not_fct_ish_chr","text":"x object check. levels (character) desired factor levels. to_na (character) Values convert NA.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-are_not_fct_ish_chr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for values that would be lost during factor coercion — .are_not_fct_ish_chr","text":"logical vector TRUE indicates failure.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-are_not_int_ish_chr.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for character to integer coercion failures — .are_not_int_ish_chr","title":"Check for character to integer coercion failures — .are_not_int_ish_chr","text":"Check character integer coercion failures","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-are_not_int_ish_chr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for character to integer coercion failures — .are_not_int_ish_chr","text":"","code":".are_not_int_ish_chr(x)"},{"path":"https://stbl.wrangle.zone/dev/reference/dot-are_not_int_ish_chr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for character to integer coercion failures — .are_not_int_ish_chr","text":"x object check.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-are_not_int_ish_chr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for character to integer coercion failures — .are_not_int_ish_chr","text":"logical matrix two columns: non_number bad_precision.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-check_cast_failures.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for coercion failures and stop if any are found — .check_cast_failures","title":"Check for coercion failures and stop if any are found — .check_cast_failures","text":"Check coercion failures stop found","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-check_cast_failures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for coercion failures and stop if any are found — .check_cast_failures","text":"","code":".check_cast_failures(failures, x_class, to, due_to, x_arg, call)"},{"path":"https://stbl.wrangle.zone/dev/reference/dot-check_cast_failures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for coercion failures and stop if any are found — .check_cast_failures","text":"failures (logical) logical vector TRUE indicates coercion failure. x_class (length-1 character) class name x use error messages. Use remove special class x checking coercion, want error message match original class. target object coercion. due_to (length-1 character) string describing reason failure. x_arg (length-1 character) argument name x. automatic value work cases, pass higher-level functions make error messages clearer unexported functions. call (environment) execution environment mention source error messages.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-check_chr_to_int_failures.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for character to integer coercion failures — .check_chr_to_int_failures","title":"Check for character to integer coercion failures — .check_chr_to_int_failures","text":"Check character integer coercion failures","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-check_chr_to_int_failures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for character to integer coercion failures — .check_chr_to_int_failures","text":"","code":".check_chr_to_int_failures(x, x_class, x_arg, call)"},{"path":"https://stbl.wrangle.zone/dev/reference/dot-check_chr_to_int_failures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for character to integer coercion failures — .check_chr_to_int_failures","text":"x argument stabilize. x_class (length-1 character) class name x use error messages. Use remove special class x checking coercion, want error message match original class. x_arg (length-1 character) argument name x. automatic value work cases, pass higher-level functions make error messages clearer unexported functions. call (environment) execution environment mention source error messages.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-check_chr_to_int_failures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for character to integer coercion failures — .check_chr_to_int_failures","text":"NULL, invisibly, x passes checks.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-check_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for NA values — .check_na","title":"Check for NA values — .check_na","text":"Checks NA values x, throwing error found allow_na FALSE.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-check_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for NA values — .check_na","text":"","code":".check_na(x, allow_na = TRUE, x_arg = caller_arg(x), call = caller_env())"},{"path":"https://stbl.wrangle.zone/dev/reference/dot-check_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for NA values — .check_na","text":"x object check. allow_na (length-1 logical) NA values ok? x_arg (length-1 character) argument name x. automatic value work cases, pass higher-level functions make error messages clearer unexported functions. call (environment) execution environment mention source error messages.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-check_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for NA values — .check_na","text":"NULL, invisibly, x passes check.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-check_scalar.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object is a scalar — .check_scalar","title":"Check if an object is a scalar — .check_scalar","text":"Checks object scalar, allowing NULL zero-length vectors specified.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-check_scalar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object is a scalar — .check_scalar","text":"","code":".check_scalar(   x,   allow_null = TRUE,   allow_zero_length = TRUE,   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )"},{"path":"https://stbl.wrangle.zone/dev/reference/dot-check_scalar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object is a scalar — .check_scalar","text":"x object check. allow_null (length-1 logical) NULL acceptable value? allow_zero_length (length-1 logical) zero-length vectors acceptable? x_arg (length-1 character) argument name x. automatic value work cases, pass higher-level functions make error messages clearer unexported functions. call (environment) execution environment mention source error messages. x_class (length-1 character) class name x use error messages. Use remove special class x checking coercion, want error message match original class.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-check_scalar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object is a scalar — .check_scalar","text":"NULL, invisibly, x passes check.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-check_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the size of an object — .check_size","title":"Check the size of an object — .check_size","text":"Checks size x (vctrs::vec_size()) within bounds min_size max_size.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-check_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the size of an object — .check_size","text":"","code":".check_size(x, min_size, max_size, x_arg = caller_arg(x), call = caller_env())"},{"path":"https://stbl.wrangle.zone/dev/reference/dot-check_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the size of an object — .check_size","text":"x object check. min_size (length-1 integer) minimum size object. Object size tested using vctrs::vec_size(). max_size (length-1 integer) maximum size object. Object size tested using vctrs::vec_size(). x_arg (length-1 character) argument name x. automatic value work cases, pass higher-level functions make error messages clearer unexported functions. call (environment) execution environment mention source error messages.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-check_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the size of an object — .check_size","text":"NULL, invisibly, x passes check.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-check_value_chr.html","id":null,"dir":"Reference","previous_headings":"","what":"Check character values against one or more regex patterns — .check_value_chr","title":"Check character values against one or more regex patterns — .check_value_chr","text":"Check character values one regex patterns","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-check_value_chr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check character values against one or more regex patterns — .check_value_chr","text":"","code":".check_value_chr(x, regex, x_arg = caller_arg(x), call = caller_env())"},{"path":"https://stbl.wrangle.zone/dev/reference/dot-check_value_chr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check character values against one or more regex patterns — .check_value_chr","text":"x argument stabilize. regex (character, list, stringr_pattern) One optional regular expressions test values x. can character vector, list character vectors, pattern object {stringr} package (e.g., stringr::fixed(\".b\")). default error message non-matching values include pattern (see regex_must_match()). provide custom message, supply named character vector value regex pattern name message displayed. check pattern matched, attach negate attribute set TRUE. complex regex pattern throws error, try installing stringi package. x_arg (length-1 character) argument name x. automatic value work cases, pass higher-level functions make error messages clearer unexported functions. call (environment) execution environment mention source error messages.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-check_value_chr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check character values against one or more regex patterns — .check_value_chr","text":"NULL, invisibly, x passes checks.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-check_value_dbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Check double values against min and max values — .check_value_dbl","title":"Check double values against min and max values — .check_value_dbl","text":"Check double values min max values","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-check_value_dbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check double values against min and max values — .check_value_dbl","text":"","code":".check_value_dbl(   x,   min_value,   max_value,   x_arg = caller_arg(x),   call = caller_env() )"},{"path":"https://stbl.wrangle.zone/dev/reference/dot-check_value_dbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check double values against min and max values — .check_value_dbl","text":"x argument stabilize. min_value (length-1 numeric) lowest allowed value x. NULL (default) values checked. max_value (length-1 numeric) highest allowed value x. NULL (default) values checked. x_arg (length-1 character) argument name x. automatic value work cases, pass higher-level functions make error messages clearer unexported functions. call (environment) execution environment mention source error messages.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-check_value_dbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check double values against min and max values — .check_value_dbl","text":"NULL, invisibly, x passes checks.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-check_x_no_more_than_y.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that one value is not greater than another — .check_x_no_more_than_y","title":"Check that one value is not greater than another — .check_x_no_more_than_y","text":"Check one value greater another","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-check_x_no_more_than_y.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that one value is not greater than another — .check_x_no_more_than_y","text":"","code":".check_x_no_more_than_y(   x,   y,   x_arg = caller_arg(x),   y_arg = caller_arg(y),   call = caller_env() )"},{"path":"https://stbl.wrangle.zone/dev/reference/dot-check_x_no_more_than_y.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that one value is not greater than another — .check_x_no_more_than_y","text":"x object check. y value compare . x_arg (length-1 character) argument name x. automatic value work cases, pass higher-level functions make error messages clearer unexported functions. y_arg (length-1 character) name y argument. call (environment) execution environment mention source error messages.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-check_x_no_more_than_y.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that one value is not greater than another — .check_x_no_more_than_y","text":"NULL, invisibly, x greater y.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-cli_escape.html","id":null,"dir":"Reference","previous_headings":"","what":"Escape curly braces for safe printing with cli — .cli_escape","title":"Escape curly braces for safe printing with cli — .cli_escape","text":"Replaces single curly braces ({, }) double curly braces ({{, }}) interpreted literal characters cli::cli_abort() expressions evaluated.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-cli_escape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Escape curly braces for safe printing with cli — .cli_escape","text":"","code":".cli_escape(msg)"},{"path":"https://stbl.wrangle.zone/dev/reference/dot-cli_escape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Escape curly braces for safe printing with cli — .cli_escape","text":"msg (character) messages escape.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-cli_escape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Escape curly braces for safe printing with cli — .cli_escape","text":"messages curly braces escaped.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-cli_mark.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap text in cli markup — .cli_mark","title":"Wrap text in cli markup — .cli_mark","text":"Wrap text cli markup","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-cli_mark.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrap text in cli markup — .cli_mark","text":"","code":".cli_mark(x, tag)"},{"path":"https://stbl.wrangle.zone/dev/reference/dot-cli_mark.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrap text in cli markup — .cli_mark","text":"x (character) string wrap. tag (character) cli class apply (e.g., \"val\", \"var\").","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-cli_mark.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrap text in cli markup — .cli_mark","text":"character vector length x cli markup.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-coerce_fct_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce to factor with specified levels — .coerce_fct_levels","title":"Coerce to factor with specified levels — .coerce_fct_levels","text":"wrapper around level-coercion helpers.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-coerce_fct_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce to factor with specified levels — .coerce_fct_levels","text":"","code":".coerce_fct_levels(   x,   levels = NULL,   to_na = character(),   x_arg = caller_arg(x),   call = caller_env() )"},{"path":"https://stbl.wrangle.zone/dev/reference/dot-coerce_fct_levels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce to factor with specified levels — .coerce_fct_levels","text":"x argument stabilize. levels (character) desired factor levels. to_na (character) Values convert NA. x_arg (length-1 character) argument name x. automatic value work cases, pass higher-level functions make error messages clearer unexported functions. call (environment) execution environment mention source error messages.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-coerce_fct_levels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce to factor with specified levels — .coerce_fct_levels","text":"x factor specified levels NAs.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-coerce_fct_levels_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Core implementation for applying factor levels — .coerce_fct_levels_impl","title":"Core implementation for applying factor levels — .coerce_fct_levels_impl","text":"Checks values x present levels throws error found.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-coerce_fct_levels_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Core implementation for applying factor levels — .coerce_fct_levels_impl","text":"","code":".coerce_fct_levels_impl(   x,   levels = NULL,   to_na = character(),   x_arg = caller_arg(x),   call = caller_env() )"},{"path":"https://stbl.wrangle.zone/dev/reference/dot-coerce_fct_levels_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Core implementation for applying factor levels — .coerce_fct_levels_impl","text":"x argument stabilize. levels (character) desired factor levels. to_na (character) Values convert NA. x_arg (length-1 character) argument name x. automatic value work cases, pass higher-level functions make error messages clearer unexported functions. call (environment) execution environment mention source error messages.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-coerce_fct_levels_impl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Core implementation for applying factor levels — .coerce_fct_levels_impl","text":"x factor specified levels.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-coerce_fct_to_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce specified values to NA — .coerce_fct_to_na","title":"Coerce specified values to NA — .coerce_fct_to_na","text":"helper converts specified values x NA.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-coerce_fct_to_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce specified values to NA — .coerce_fct_to_na","text":"","code":".coerce_fct_to_na(x, to_na = character(), call = caller_env())"},{"path":"https://stbl.wrangle.zone/dev/reference/dot-coerce_fct_to_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce specified values to NA — .coerce_fct_to_na","text":"x argument stabilize. to_na (character) Values convert NA. call (environment) execution environment mention source error messages.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-coerce_fct_to_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce specified values to NA — .coerce_fct_to_na","text":"x specified values converted NA.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-collapse_dash.html","id":null,"dir":"Reference","previous_headings":"","what":"Paste together collapsing with - — .collapse_dash","title":"Paste together collapsing with - — .collapse_dash","text":"Paste together collapsing -","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-collapse_dash.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Paste together collapsing with - — .collapse_dash","text":"","code":".collapse_dash(...)"},{"path":"https://stbl.wrangle.zone/dev/reference/dot-collapse_dash.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Paste together collapsing with - — .collapse_dash","text":"... Things paste.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-collapse_dash.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Paste together collapsing with - — .collapse_dash","text":"length-1 character vector.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-compile_dash.html","id":null,"dir":"Reference","previous_headings":"","what":"Paste together with - separator — .compile_dash","title":"Paste together with - separator — .compile_dash","text":"Paste together - separator","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-compile_dash.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Paste together with - separator — .compile_dash","text":"","code":".compile_dash(...)"},{"path":"https://stbl.wrangle.zone/dev/reference/dot-compile_dash.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Paste together with - separator — .compile_dash","text":"... Things paste.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-compile_dash.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Paste together with - separator — .compile_dash","text":"length-1 character vector.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-compile_pkg_condition_classes.html","id":null,"dir":"Reference","previous_headings":"","what":"Compile a condition class chain — .compile_pkg_condition_classes","title":"Compile a condition class chain — .compile_pkg_condition_classes","text":"Compile condition class chain","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-compile_pkg_condition_classes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compile a condition class chain — .compile_pkg_condition_classes","text":"","code":".compile_pkg_condition_classes(package, ...)"},{"path":"https://stbl.wrangle.zone/dev/reference/dot-compile_pkg_condition_classes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compile a condition class chain — .compile_pkg_condition_classes","text":"package (length-1 character) name package use classes. ... (character) Components class name, least-specific .","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-compile_pkg_condition_classes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compile a condition class chain — .compile_pkg_condition_classes","text":"character vector.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-compile_pkg_error_classes.html","id":null,"dir":"Reference","previous_headings":"","what":"Compile an error class chain — .compile_pkg_error_classes","title":"Compile an error class chain — .compile_pkg_error_classes","text":"Compile error class chain","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-compile_pkg_error_classes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compile an error class chain — .compile_pkg_error_classes","text":"","code":".compile_pkg_error_classes(package, ...)"},{"path":"https://stbl.wrangle.zone/dev/reference/dot-compile_pkg_error_classes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compile an error class chain — .compile_pkg_error_classes","text":"package (length-1 character) name package use classes. ... (character) Components class name, least-specific .","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-compile_pkg_error_classes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compile an error class chain — .compile_pkg_error_classes","text":"character vector classes.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-construct_specification_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a specified stabilizer function — .construct_specification_fn","title":"Construct a specified stabilizer function — .construct_specification_fn","text":"Construct specified stabilizer function","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-construct_specification_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a specified stabilizer function — .construct_specification_fn","text":"","code":".construct_specification_fn(   check_dupes,   stabilizer,   factory_args,   ...,   call = rlang::caller_env() )"},{"path":"https://stbl.wrangle.zone/dev/reference/dot-construct_specification_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a specified stabilizer function — .construct_specification_fn","text":"check_dupes (list) empty list, list containing expression checks duplicate arguments. stabilizer (length-1 character) Name stabilizer function call. factory_args Arguments passed specify_cls() .... ... used. Included avoid confusion R CMD check. call (environment) environment use parent generated function. Defaults caller's environment.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-construct_specification_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a specified stabilizer function — .construct_specification_fn","text":"function class \"stbl_specified_fn\" calls specified stabilizer function provided arguments. generated function also accept ... additional arguments pass stabilizer function. can copy/paste body resulting function want provide additional context functionality.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-construct_stabilizer_symbol.html","id":null,"dir":"Reference","previous_headings":"","what":"Assemble the function name of the stabilizer — .construct_stabilizer_symbol","title":"Assemble the function name of the stabilizer — .construct_stabilizer_symbol","text":"Assemble function name stabilizer","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-construct_stabilizer_symbol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assemble the function name of the stabilizer — .construct_stabilizer_symbol","text":"","code":".construct_stabilizer_symbol(stabilizer, scalar = FALSE)"},{"path":"https://stbl.wrangle.zone/dev/reference/dot-construct_stabilizer_symbol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assemble the function name of the stabilizer — .construct_stabilizer_symbol","text":"stabilizer (length-1 character) Name stabilizer function call. scalar (length-1 logical) Whether call scalar version stabilizer.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-construct_stabilizer_symbol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assemble the function name of the stabilizer — .construct_stabilizer_symbol","text":"symbol stabilizer function call.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-define_main_msg.html","id":null,"dir":"Reference","previous_headings":"","what":"Define the main error message for a ","title":"Define the main error message for a ","text":"Define main error message \"must\" error","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-define_main_msg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define the main error message for a ","text":"","code":".define_main_msg(x_arg, msg)"},{"path":"https://stbl.wrangle.zone/dev/reference/dot-define_main_msg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define the main error message for a ","text":"x_arg (length-1 character) argument name x. automatic value work cases, pass higher-level functions make error messages clearer unexported functions. msg (character) core error message describing requirement.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-define_main_msg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define the main error message for a ","text":"character string.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-describe_failure_chr.html","id":null,"dir":"Reference","previous_headings":"","what":"Describe a character-based validation failure — .describe_failure_chr","title":"Describe a character-based validation failure — .describe_failure_chr","text":"Describe character-based validation failure","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-describe_failure_chr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Describe a character-based validation failure — .describe_failure_chr","text":"","code":".describe_failure_chr(x, success, negate = FALSE)"},{"path":"https://stbl.wrangle.zone/dev/reference/dot-describe_failure_chr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Describe a character-based validation failure — .describe_failure_chr","text":"x argument stabilize. success (logical) logical vector indicating elements x passed check. negate (length-1 logical) check negative one?","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-describe_failure_chr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Describe a character-based validation failure — .describe_failure_chr","text":"named character vector used additional_msg .stop_must().","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-elements_are_cls_ish.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if all elements of a list-like object are ish — .elements_are_cls_ish","title":"Check if all elements of a list-like object are ish — .elements_are_cls_ish","text":"Check elements list-like object ish","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-elements_are_cls_ish.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if all elements of a list-like object are ish — .elements_are_cls_ish","text":"","code":".elements_are_cls_ish(x, are_cls_ish_fn, ...)"},{"path":"https://stbl.wrangle.zone/dev/reference/dot-elements_are_cls_ish.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if all elements of a list-like object are ish — .elements_are_cls_ish","text":"x object check.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-fast_false.html","id":null,"dir":"Reference","previous_headings":"","what":"Always return FALSE — .fast_false","title":"Always return FALSE — .fast_false","text":"helper force slow path .to_cls_scalar() factors, since rlang::is_scalar_factor() exist.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-fast_false.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Always return FALSE — .fast_false","text":"","code":".fast_false(x)"},{"path":"https://stbl.wrangle.zone/dev/reference/dot-fast_false.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Always return FALSE — .fast_false","text":"x object (ignored).","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-fast_false.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Always return FALSE — .fast_false","text":"FALSE, always.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-find_failures.html","id":null,"dir":"Reference","previous_headings":"","what":"Safely find failure locations in a vector — .find_failures","title":"Safely find failure locations in a vector — .find_failures","text":"Run check_fn(x, check_value) check_value NULL.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-find_failures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Safely find failure locations in a vector — .find_failures","text":"","code":".find_failures(x, check_value, check_fn)"},{"path":"https://stbl.wrangle.zone/dev/reference/dot-find_failures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Safely find failure locations in a vector — .find_failures","text":"x vector check. check_value value check (e.g., regex pattern). NULL, check skipped. check_fn function use checking.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-find_failures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Safely find failure locations in a vector — .find_failures","text":"integer vector failure locations, NULL failures check skipped.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-glue2.html","id":null,"dir":"Reference","previous_headings":"","what":"A wrapper for glue::glue with custom delimiters — .glue2","title":"A wrapper for glue::glue with custom delimiters — .glue2","text":"wrapper sets .open .close arguments glue::glue() [ ], respectively. allows safe use glue interpolation within messages processed cli::cli_abort(), uses { } styling.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-glue2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A wrapper for glue::glue with custom delimiters — .glue2","text":"","code":".glue2(..., env = caller_env())"},{"path":"https://stbl.wrangle.zone/dev/reference/dot-glue2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A wrapper for glue::glue with custom delimiters — .glue2","text":"... Arguments passed glue::glue(). Usually expects unnamed arguments named arguments .envir, .open, .close acceptable. env environment evaluate expressions.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-glue2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A wrapper for glue::glue with custom delimiters — .glue2","text":"character string evaluated expressions.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-has_regex_pattern.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect a regex pattern in a character vector — .has_regex_pattern","title":"Detect a regex pattern in a character vector — .has_regex_pattern","text":"wrapper around stringi::stri_detect_regex() base::grepl() prefers stringi implementation package available.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-has_regex_pattern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect a regex pattern in a character vector — .has_regex_pattern","text":"","code":".has_regex_pattern(x, regex)"},{"path":"https://stbl.wrangle.zone/dev/reference/dot-has_regex_pattern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect a regex pattern in a character vector — .has_regex_pattern","text":"x argument stabilize. regex (character, list, stringr_pattern) One optional regular expressions test values x. can character vector, list character vectors, pattern object {stringr} package (e.g., stringr::fixed(\".b\")). default error message non-matching values include pattern (see regex_must_match()). provide custom message, supply named character vector value regex pattern name message displayed. check pattern matched, attach negate attribute set TRUE. complex regex pattern throws error, try installing stringi package.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-has_regex_pattern.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect a regex pattern in a character vector — .has_regex_pattern","text":"logical vector matches x regex.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-is_allowed_null.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a value is NULL and NULLs are allowed — .is_allowed_null","title":"Check if a value is NULL and NULLs are allowed — .is_allowed_null","text":"Check value NULL NULLs allowed","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-is_allowed_null.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a value is NULL and NULLs are allowed — .is_allowed_null","text":"","code":".is_allowed_null(x, allow_null = TRUE, call = caller_env())"},{"path":"https://stbl.wrangle.zone/dev/reference/dot-is_allowed_null.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a value is NULL and NULLs are allowed — .is_allowed_null","text":"x object check. allow_null (length-1 logical) NULL acceptable value? call (environment) execution environment mention source error messages.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-is_allowed_null.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a value is NULL and NULLs are allowed — .is_allowed_null","text":"(length-1 logical) TRUE x NULL allow_null TRUE.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-maybe_check_dupes.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct the check_dupes expression — .maybe_check_dupes","title":"Construct the check_dupes expression — .maybe_check_dupes","text":"Construct check_dupes expression","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-maybe_check_dupes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct the check_dupes expression — .maybe_check_dupes","text":"","code":".maybe_check_dupes(factory_args)"},{"path":"https://stbl.wrangle.zone/dev/reference/dot-maybe_check_dupes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct the check_dupes expression — .maybe_check_dupes","text":"factory_args Arguments passed factory.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-maybe_check_dupes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct the check_dupes expression — .maybe_check_dupes","text":"empty list, list containing expression checks duplicate arguments.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-shared-params-check.html","id":null,"dir":"Reference","previous_headings":"","what":"Shared parameters for check functions — .shared-params-check","title":"Shared parameters for check functions — .shared-params-check","text":"Shared parameters check functions","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-shared-params-check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shared parameters for check functions — .shared-params-check","text":"x object check.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-shared-params.html","id":null,"dir":"Reference","previous_headings":"","what":"Shared parameters — .shared-params","title":"Shared parameters — .shared-params","text":"parameters used multiple functions. defined make easier import find.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-shared-params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shared parameters — .shared-params","text":"... Arguments passed methods. allow_na (length-1 logical) NA values ok? allow_null (length-1 logical) NULL acceptable value? allow_zero_length (length-1 logical) zero-length vectors acceptable? are_cls_ish_fn are_*_ish function apply element. call (environment) execution environment mention source error messages. cast_fn (function) .*() function use coercion. check_cls_value_fn (function) function check values x coercion. check_cls_value_fn_args (list) list additional arguments pass check_cls_value_fn(). coerce_character (length-1 logical) character vectors \"1\" \"2.0\" considered numeric-ish? coerce_factor (length-1 logical) factors values \"1\" \"2.0\" considered numeric-ish? Note package uses character value factor, .integer() .double() use integer index factor. depth (length-1 integer) Current recursion depth. manually set parameter. is_rlang_cls_scalar (function) is_scalar_*() function rlang, used fast path x already right type. levels (character) desired factor levels. message_env (environment) execution environment use evaluate variables error messages. min_size (length-1 integer) minimum size object. Object size tested using vctrs::vec_size(). min_value (length-1 numeric) lowest allowed value x. NULL (default) values checked. max_size (length-1 integer) maximum size object. Object size tested using vctrs::vec_size(). max_value (length-1 numeric) highest allowed value x. NULL (default) values checked. package (length-1 character) name package use classes. parent parent condition, might create rlang::try_fetch(). See rlang::abort() additional information. regex (character, list, stringr_pattern) One optional regular expressions test values x. can character vector, list character vectors, pattern object {stringr} package (e.g., stringr::fixed(\".b\")). default error message non-matching values include pattern (see regex_must_match()). provide custom message, supply named character vector value regex pattern name message displayed. check pattern matched, attach negate attribute set TRUE. complex regex pattern throws error, try installing stringi package. to_class (length-1 character) name class coerce . to_cls_args (list) list additional arguments pass to_cls_fn(). to_cls_fn (function) to_*() function use coercion. to_cls_scalar_args (list) list additional arguments pass to_cls_scalar_fn(). to_cls_scalar_fn (function) to_*_scalar() function use coercion. to_na (character) Values convert NA. to_type_obj empty object target type (e.g., integer()). x argument stabilize. x_arg (length-1 character) argument name x. automatic value work cases, pass higher-level functions make error messages clearer unexported functions. x_class (length-1 character) class name x use error messages. Use remove special class x checking coercion, want error message match original class.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-stabilize_cls.html","id":null,"dir":"Reference","previous_headings":"","what":"Stabilize an object of a specific class — .stabilize_cls","title":"Stabilize an object of a specific class — .stabilize_cls","text":"helper used stabilize_*() functions provide standard set checks.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-stabilize_cls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stabilize an object of a specific class — .stabilize_cls","text":"","code":".stabilize_cls(   x,   to_cls_fn,   ...,   to_cls_args = list(),   check_cls_value_fn = NULL,   check_cls_value_fn_args = list(),   allow_null = TRUE,   allow_na = TRUE,   min_size = NULL,   max_size = NULL,   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )"},{"path":"https://stbl.wrangle.zone/dev/reference/dot-stabilize_cls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stabilize an object of a specific class — .stabilize_cls","text":"x argument stabilize. to_cls_fn (function) to_*() function use coercion. ... Arguments passed methods. to_cls_args (list) list additional arguments pass to_cls_fn(). check_cls_value_fn (function) function check values x coercion. check_cls_value_fn_args (list) list additional arguments pass check_cls_value_fn(). allow_null (length-1 logical) NULL acceptable value? allow_na (length-1 logical) NA values ok? min_size (length-1 integer) minimum size object. Object size tested using vctrs::vec_size(). max_size (length-1 integer) maximum size object. Object size tested using vctrs::vec_size(). x_arg (length-1 character) argument name x. automatic value work cases, pass higher-level functions make error messages clearer unexported functions. call (environment) execution environment mention source error messages. x_class (length-1 character) class name x use error messages. Use remove special class x checking coercion, want error message match original class.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-stabilize_cls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stabilize an object of a specific class — .stabilize_cls","text":"x vector target class checks passed.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-stabilize_cls_scalar.html","id":null,"dir":"Reference","previous_headings":"","what":"Stabilize a scalar object of a specific class — .stabilize_cls_scalar","title":"Stabilize a scalar object of a specific class — .stabilize_cls_scalar","text":"helper used stabilize_*_scalar() functions provide standard set checks.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-stabilize_cls_scalar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stabilize a scalar object of a specific class — .stabilize_cls_scalar","text":"","code":".stabilize_cls_scalar(   x,   to_cls_scalar_fn,   ...,   to_cls_scalar_args = list(),   check_cls_value_fn = NULL,   check_cls_value_fn_args = list(),   allow_null = TRUE,   allow_zero_length = TRUE,   allow_na = TRUE,   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )"},{"path":"https://stbl.wrangle.zone/dev/reference/dot-stabilize_cls_scalar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stabilize a scalar object of a specific class — .stabilize_cls_scalar","text":"x argument stabilize. to_cls_scalar_fn (function) to_*_scalar() function use coercion. ... Arguments passed methods. to_cls_scalar_args (list) list additional arguments pass to_cls_scalar_fn(). check_cls_value_fn (function) function check values x coercion. check_cls_value_fn_args (list) list additional arguments pass check_cls_value_fn(). allow_null (length-1 logical) NULL acceptable value? allow_zero_length (length-1 logical) zero-length vectors acceptable? allow_na (length-1 logical) NA values ok? x_arg (length-1 character) argument name x. automatic value work cases, pass higher-level functions make error messages clearer unexported functions. call (environment) execution environment mention source error messages. x_class (length-1 character) class name x use error messages. Use remove special class x checking coercion, want error message match original class.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-stabilize_cls_scalar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stabilize a scalar object of a specific class — .stabilize_cls_scalar","text":"x scalar target class checks passed.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-stbl_abort.html","id":null,"dir":"Reference","previous_headings":"","what":"Signal an error with standards applied — .stbl_abort","title":"Signal an error with standards applied — .stbl_abort","text":"wrapper around cli::cli_abort() throw classed errors.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-stbl_abort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Signal an error with standards applied — .stbl_abort","text":"","code":".stbl_abort(   message,   subclass,   call = caller_env(),   message_env = call,   parent = NULL,   ... )"},{"path":"https://stbl.wrangle.zone/dev/reference/dot-stbl_abort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Signal an error with standards applied — .stbl_abort","text":"message (character) message new error. Messages formatted cli::cli_bullets(). subclass (character) Class(es) assign error. prefixed \"stbl-error-\". call (environment) execution environment mention source error messages. message_env (environment) execution environment use evaluate variables error messages. parent parent condition, might create rlang::try_fetch(). See rlang::abort() additional information. ... Additional parameters passed cli::cli_abort() rlang::abort().","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-stop_bad_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Stop for bad factor levels — .stop_bad_levels","title":"Stop for bad factor levels — .stop_bad_levels","text":"Throws standardized error values found provided factor levels.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-stop_bad_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stop for bad factor levels — .stop_bad_levels","text":"","code":".stop_bad_levels(x, bad_casts, levels, to_na, x_arg, call)"},{"path":"https://stbl.wrangle.zone/dev/reference/dot-stop_bad_levels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stop for bad factor levels — .stop_bad_levels","text":"x argument stabilize. bad_casts (logical) logical vector indicating elements x allowed levels. levels (character) desired factor levels. to_na (character) Values convert NA. x_arg (length-1 character) argument name x. automatic value work cases, pass higher-level functions make error messages clearer unexported functions. call (environment) execution environment mention source error messages.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-stop_bad_levels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stop for bad factor levels — .stop_bad_levels","text":"function called side effect throwing error return value.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-stop_cant_coerce.html","id":null,"dir":"Reference","previous_headings":"","what":"Abort with a standardized ","title":"Abort with a standardized ","text":"Abort standardized \"coerce\" message","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-stop_cant_coerce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Abort with a standardized ","text":"","code":".stop_cant_coerce(   from_class,   to_class,   x_arg,   call,   additional_msg = NULL,   message_env = call,   parent = NULL,   ... )"},{"path":"https://stbl.wrangle.zone/dev/reference/dot-stop_cant_coerce.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abort with a standardized ","text":"from_class (length-1 character) class object failed coercion. to_class (length-1 character) target class coercion. x_arg (length-1 character) argument name x. automatic value work cases, pass higher-level functions make error messages clearer unexported functions. call (environment) execution environment mention source error messages. additional_msg (length-1 character) Optional, additional cli-formatted messages. message_env (environment) execution environment use evaluate variables error messages. parent parent condition, might create rlang::try_fetch(). See rlang::abort() additional information. ... Additional parameters passed cli::cli_abort() rlang::abort().","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-stop_cant_coerce.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Abort with a standardized ","text":"function called side effect throwing error return value.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-stop_incompatible.html","id":null,"dir":"Reference","previous_headings":"","what":"Abort with an ","title":"Abort with an ","text":"Abort \"incompatible type\" message","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-stop_incompatible.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Abort with an ","text":"","code":".stop_incompatible(   x_class,   to,   failures,   due_to,   x_arg,   call,   parent = NULL,   ... )"},{"path":"https://stbl.wrangle.zone/dev/reference/dot-stop_incompatible.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abort with an ","text":"x_class (length-1 character) class name x use error messages. Use remove special class x checking coercion, want error message match original class. target object coercion. failures (logical) logical vector indicating elements failed. due_to (length-1 character) string describing reason failure. x_arg (length-1 character) argument name x. automatic value work cases, pass higher-level functions make error messages clearer unexported functions. call (environment) execution environment mention source error messages. parent parent condition, might create rlang::try_fetch(). See rlang::abort() additional information. ... Additional parameters passed cli::cli_abort() rlang::abort().","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-stop_incompatible.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Abort with an ","text":"function called side effect throwing error return value.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-stop_must.html","id":null,"dir":"Reference","previous_headings":"","what":"Abort with a standardized ","title":"Abort with a standardized ","text":"Abort standardized \"must\" message","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-stop_must.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Abort with a standardized ","text":"","code":".stop_must(   msg,   x_arg,   call,   additional_msg = NULL,   subclass = \"must\",   message_env = call,   parent = NULL,   ... )"},{"path":"https://stbl.wrangle.zone/dev/reference/dot-stop_must.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abort with a standardized ","text":"msg (character) core error message describing requirement. x_arg (length-1 character) argument name x. automatic value work cases, pass higher-level functions make error messages clearer unexported functions. call (environment) execution environment mention source error messages. additional_msg (character) Optional, additional cli-formatted messages. subclass (character) Class(es) assign error. prefixed \"stbl-error-\". message_env (environment) execution environment use evaluate variables error messages. parent parent condition, might create rlang::try_fetch(). See rlang::abort() additional information. ... Additional parameters passed cli::cli_abort() rlang::abort().","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-stop_must.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Abort with a standardized ","text":"function called side effect throwing error return value.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-stop_null.html","id":null,"dir":"Reference","previous_headings":"","what":"Abort because an argument must not be NULL — .stop_null","title":"Abort because an argument must not be NULL — .stop_null","text":"Abort argument must NULL","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-stop_null.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Abort because an argument must not be NULL — .stop_null","text":"","code":".stop_null(x_arg, call, parent = NULL, ...)"},{"path":"https://stbl.wrangle.zone/dev/reference/dot-stop_null.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abort because an argument must not be NULL — .stop_null","text":"x_arg (length-1 character) argument name x. automatic value work cases, pass higher-level functions make error messages clearer unexported functions. call (environment) execution environment mention source error messages. parent parent condition, might create rlang::try_fetch(). See rlang::abort() additional information. ... Additional parameters passed cli::cli_abort() rlang::abort().","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-stop_null.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Abort because an argument must not be NULL — .stop_null","text":"function called side effect throwing error return value.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-to_cls_from_fct.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce an object from a factor to a specific class — .to_cls_from_fct","title":"Coerce an object from a factor to a specific class — .to_cls_from_fct","text":"helper wraps around to_*() function provide standard way coerce factors.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-to_cls_from_fct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce an object from a factor to a specific class — .to_cls_from_fct","text":"","code":".to_cls_from_fct(   x,   to_cls_fn,   to_cls_args,   to_class,   coerce_factor = TRUE,   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )"},{"path":"https://stbl.wrangle.zone/dev/reference/dot-to_cls_from_fct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce an object from a factor to a specific class — .to_cls_from_fct","text":"x argument stabilize. to_cls_fn (function) to_*() function use coercion. to_cls_args (list) list additional arguments pass to_cls_fn(). to_class (length-1 character) name class coerce . coerce_factor (length-1 logical) factors values \"1\" \"2.0\" considered numeric-ish? Note package uses character value factor, .integer() .double() use integer index factor. x_arg (length-1 character) argument name x. automatic value work cases, pass higher-level functions make error messages clearer unexported functions. call (environment) execution environment mention source error messages. x_class (length-1 character) class name x use error messages. Use remove special class x checking coercion, want error message match original class.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-to_cls_from_fct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce an object from a factor to a specific class — .to_cls_from_fct","text":"x coerced target class.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-to_cls_from_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce a list to a specific class — .to_cls_from_list","title":"Coerce a list to a specific class — .to_cls_from_list","text":"Coerce list specific class","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-to_cls_from_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce a list to a specific class — .to_cls_from_list","text":"","code":".to_cls_from_list(   x,   to_cls_fn,   to_class,   ...,   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )"},{"path":"https://stbl.wrangle.zone/dev/reference/dot-to_cls_from_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce a list to a specific class — .to_cls_from_list","text":"x argument stabilize. to_cls_fn (function) to_*() function use coercion. to_class (length-1 character) name class coerce . ... Arguments passed methods. x_arg (length-1 character) argument name x. automatic value work cases, pass higher-level functions make error messages clearer unexported functions. call (environment) execution environment mention source error messages. x_class (length-1 character) class name x use error messages. Use remove special class x checking coercion, want error message match original class.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-to_cls_from_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce a list to a specific class — .to_cls_from_list","text":"x coerced target class.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-to_cls_scalar.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce an object to a specific scalar class — .to_cls_scalar","title":"Coerce an object to a specific scalar class — .to_cls_scalar","text":"helper wraps around to_*_scalar() function provide standard set checks.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-to_cls_scalar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce an object to a specific scalar class — .to_cls_scalar","text":"","code":".to_cls_scalar(   x,   is_rlang_cls_scalar,   to_cls_fn,   to_cls_args = list(),   allow_null = TRUE,   allow_zero_length = TRUE,   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )"},{"path":"https://stbl.wrangle.zone/dev/reference/dot-to_cls_scalar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce an object to a specific scalar class — .to_cls_scalar","text":"x argument stabilize. is_rlang_cls_scalar (function) is_scalar_*() function rlang, used fast path x already right type. to_cls_fn (function) to_*() function use coercion. to_cls_args (list) list additional arguments pass to_cls_fn(). allow_null (length-1 logical) NULL acceptable value? allow_zero_length (length-1 logical) zero-length vectors acceptable? x_arg (length-1 character) argument name x. automatic value work cases, pass higher-level functions make error messages clearer unexported functions. call (environment) execution environment mention source error messages. x_class (length-1 character) class name x use error messages. Use remove special class x checking coercion, want error message match original class.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-to_cls_scalar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce an object to a specific scalar class — .to_cls_scalar","text":"x scalar target class.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-to_null.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensure an argument is NULL — .to_null","title":"Ensure an argument is NULL — .to_null","text":"allow_null TRUE, coerce x NULL. Otherwise throw informative error.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-to_null.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensure an argument is NULL — .to_null","text":"","code":".to_null(x, allow_null = TRUE, x_arg = caller_arg(x), call = caller_env())"},{"path":"https://stbl.wrangle.zone/dev/reference/dot-to_null.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensure an argument is NULL — .to_null","text":"x argument stabilize. allow_null (length-1 logical) NULL acceptable value? x_arg (length-1 character) argument name x. automatic value work cases, pass higher-level functions make error messages clearer unexported functions. call (environment) execution environment mention source error messages.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-to_null.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensure an argument is NULL — .to_null","text":"NULL error.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-to_num_from_complex.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce an object from a complex to a numeric class — .to_num_from_complex","title":"Coerce an object from a complex to a numeric class — .to_num_from_complex","text":"helper wraps around to_*() function provide standard way coerce complex numbers.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-to_num_from_complex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce an object from a complex to a numeric class — .to_num_from_complex","text":"","code":".to_num_from_complex(   x,   cast_fn,   to_type_obj,   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )"},{"path":"https://stbl.wrangle.zone/dev/reference/dot-to_num_from_complex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce an object from a complex to a numeric class — .to_num_from_complex","text":"x argument stabilize. cast_fn (function) .*() function use coercion. to_type_obj empty object target type (e.g., integer()). x_arg (length-1 character) argument name x. automatic value work cases, pass higher-level functions make error messages clearer unexported functions. call (environment) execution environment mention source error messages. x_class (length-1 character) class name x use error messages. Use remove special class x checking coercion, want error message match original class.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/dot-to_num_from_complex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce an object from a complex to a numeric class — .to_num_from_complex","text":"x coerced target class.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/expect_pkg_error_classes.html","id":null,"dir":"Reference","previous_headings":"","what":"Test package error classes — expect_pkg_error_classes","title":"Test package error classes — expect_pkg_error_classes","text":"use pkg_abort() signal errors, can use function test errors generated expected.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/expect_pkg_error_classes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test package error classes — expect_pkg_error_classes","text":"","code":"expect_pkg_error_classes(object, package, ...)"},{"path":"https://stbl.wrangle.zone/dev/reference/expect_pkg_error_classes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test package error classes — expect_pkg_error_classes","text":"object expression expected throw error. package (length-1 character) name package use classes. ... (character) Components class name, least-specific .","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/expect_pkg_error_classes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test package error classes — expect_pkg_error_classes","text":"classes error invisibly success error failure. Unlike testthat expectations, expectation usefully chained.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/expect_pkg_error_classes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test package error classes — expect_pkg_error_classes","text":"","code":"expect_pkg_error_classes(   pkg_abort(\"stbl\", \"This is a test error\", \"test_subclass\"),   \"stbl\",   \"test_subclass\" ) try(   expect_pkg_error_classes(     pkg_abort(\"stbl\", \"This is a test error\", \"test_subclass\"),     \"stbl\",     \"different_subclass\"   ) ) #> Error : `object_error` has class 'stbl-error-test_subclass'/'stbl-error'/'stbl-condition'/'rlang_error'/'error'/'condition', not 'stbl-error-different_subclass'/'stbl-error'/'stbl-condition'/'rlang_error'/'error'/'condition'."},{"path":"https://stbl.wrangle.zone/dev/reference/grapes-and-and-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"NULL-coalescing-like operator — %&&%","title":"NULL-coalescing-like operator — %&&%","text":"left-hand side NULL, returns right-hand side. Otherwise, returns NULL. useful guarding expressions executed value NULL. Meant similar %||% operator (returns y x NULL).","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/grapes-and-and-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NULL-coalescing-like operator — %&&%","text":"","code":"x %&&% y"},{"path":"https://stbl.wrangle.zone/dev/reference/grapes-and-and-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NULL-coalescing-like operator — %&&%","text":"x object check NULL. y value return x NULL.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/grapes-and-and-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NULL-coalescing-like operator — %&&%","text":"NULL value y.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/injection-operator.html","id":null,"dir":"Reference","previous_headings":"","what":"Injection operator for defused arguments — injection-operator","title":"Injection operator for defused arguments — injection-operator","text":"Injection operator defused arguments","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/object_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify the class, type, etc of an object — object_type","title":"Identify the class, type, etc of an object — object_type","text":"Extract class (type) object use error messages.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/object_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify the class, type, etc of an object — object_type","text":"","code":"object_type(x)"},{"path":"https://stbl.wrangle.zone/dev/reference/object_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify the class, type, etc of an object — object_type","text":"x object test.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/object_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify the class, type, etc of an object — object_type","text":"length-1 character vector describing class object.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/object_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify the class, type, etc of an object — object_type","text":"","code":"object_type(\"a\") #> [1] \"character\" object_type(1L) #> [1] \"integer\" object_type(1.1) #> [1] \"double\" object_type(mtcars) #> [1] \"data.frame\" object_type(rlang::quo(something)) #> [1] \"quosure\""},{"path":"https://stbl.wrangle.zone/dev/reference/pkg_abort.html","id":null,"dir":"Reference","previous_headings":"","what":"Signal an error with standards applied — pkg_abort","title":"Signal an error with standards applied — pkg_abort","text":"wrapper around cli::cli_abort() throw classed errors, opinionated framework error classes.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/pkg_abort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Signal an error with standards applied — pkg_abort","text":"","code":"pkg_abort(   package,   message,   subclass,   call = caller_env(),   message_env = call,   parent = NULL,   ... )"},{"path":"https://stbl.wrangle.zone/dev/reference/pkg_abort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Signal an error with standards applied — pkg_abort","text":"package (length-1 character) name package use classes. message (character) message new error. Messages formatted cli::cli_bullets(). subclass (character) Class(es) assign error. prefixed \"{package}-error-\". call (environment) execution environment mention source error messages. message_env (environment) execution environment use evaluate variables error messages. parent parent condition, might create rlang::try_fetch(). See rlang::abort() additional information. ... Additional parameters passed cli::cli_abort() rlang::abort().","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/pkg_abort.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Signal an error with standards applied — pkg_abort","text":"","code":"try(pkg_abort(\"stbl\", \"This is a test error\", \"test_subclass\")) #> Error in eval(expr, envir) : This is a test error tryCatch(   pkg_abort(\"stbl\", \"This is a test error\", \"test_subclass\"),   `stbl-error` = function(e) {     \"Caught a generic stbl error.\"   } ) #> [1] \"Caught a generic stbl error.\" tryCatch(   pkg_abort(\"stbl\", \"This is a test error\", \"test_subclass\"),   `stbl-error-test_subclass` = function(e) {     \"Caught a specific subclass of stbl error.\"   } ) #> [1] \"Caught a specific subclass of stbl error.\""},{"path":"https://stbl.wrangle.zone/dev/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. rlang caller_arg, caller_env","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/regex_must_match.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a regex matching rule — regex_must_match","title":"Create a regex matching rule — regex_must_match","text":"Attach standardized error message regex argument. default, message \"must match regex pattern {regex}\". input regex negate attribute set TRUE, message instead \"must match...\". message can used stabilize_chr() stabilize_chr_scalar().","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/regex_must_match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a regex matching rule — regex_must_match","text":"","code":"regex_must_match(regex)"},{"path":"https://stbl.wrangle.zone/dev/reference/regex_must_match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a regex matching rule — regex_must_match","text":"regex (character) regular expression pattern.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/regex_must_match.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a regex matching rule — regex_must_match","text":"regex value names() equal generated error message.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/regex_must_match.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a regex matching rule — regex_must_match","text":"","code":"regex_must_match(\"[aeiou]\") #> must match the regex pattern {.val [aeiou]}  #>                                   \"[aeiou]\"   # With negation: regex <- \"[aeiou]\" attr(regex, \"negate\") <- TRUE regex_must_match(regex) #> must not match the regex pattern {.val [aeiou]}  #>                                       \"[aeiou]\"  #> attr(,\"negate\") #> [1] TRUE"},{"path":"https://stbl.wrangle.zone/dev/reference/regex_must_not_match.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a 'must not match' regex rule — regex_must_not_match","title":"Create a 'must not match' regex rule — regex_must_not_match","text":"Attach standardized error message regex argument specifies pattern must matched. wrapper around regex_must_match() sets negate attribute TRUE.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/regex_must_not_match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a 'must not match' regex rule — regex_must_not_match","text":"","code":"regex_must_not_match(regex)"},{"path":"https://stbl.wrangle.zone/dev/reference/regex_must_not_match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a 'must not match' regex rule — regex_must_not_match","text":"regex (character) regular expression pattern.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/regex_must_not_match.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a 'must not match' regex rule — regex_must_not_match","text":"regex value negate attribute names() equal generated \"must match\" error message.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/regex_must_not_match.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a 'must not match' regex rule — regex_must_not_match","text":"","code":"regex_must_not_match(\"[aeiou]\") #> must not match the regex pattern {.val [aeiou]}  #>                                       \"[aeiou]\"  #> attr(,\"negate\") #> [1] TRUE"},{"path":"https://stbl.wrangle.zone/dev/reference/specify_chr.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a specified character stabilizer function — specify_chr","title":"Create a specified character stabilizer function — specify_chr","text":"specify_chr() creates function call stabilize_chr() provided arguments. specify_chr_scalar() creates function call stabilize_chr_scalar() provided arguments.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/specify_chr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a specified character stabilizer function — specify_chr","text":"","code":"specify_chr(...)  specify_chr_scalar(...)"},{"path":"https://stbl.wrangle.zone/dev/reference/specify_chr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a specified character stabilizer function — specify_chr","text":"... Arguments passed stabilize_chr, stabilize_chr_scalar allow_na (length-1 logical) NA values ok? allow_null (length-1 logical) NULL acceptable value? min_size (length-1 integer) minimum size object. Object size tested using vctrs::vec_size(). max_size (length-1 integer) maximum size object. Object size tested using vctrs::vec_size(). regex (character, list, stringr_pattern) One optional regular expressions test values x. can character vector, list character vectors, pattern object {stringr} package (e.g., stringr::fixed(\".b\")). default error message non-matching values include pattern (see regex_must_match()). provide custom message, supply named character vector value regex pattern name message displayed. check pattern matched, attach negate attribute set TRUE. complex regex pattern throws error, try installing stringi package. allow_zero_length (length-1 logical) zero-length vectors acceptable?","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/specify_chr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a specified character stabilizer function — specify_chr","text":"function class \"stbl_specified_fn\" calls stabilize_chr() stabilize_chr_scalar() provided arguments. generated function also accept ... additional arguments pass stabilize_chr() stabilize_chr_scalar(). can copy/paste body resulting function want provide additional context functionality.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/specify_chr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a specified character stabilizer function — specify_chr","text":"","code":"stabilize_email <- specify_chr(regex = \"^[^@]+@[^@]+\\\\.[^@]+$\") stabilize_email(\"stbl@example.com\") #> [1] \"stbl@example.com\" try(stabilize_email(\"not-an-email-address\")) #> Error in eval(expr, envir) :  #>   `\"not-an-email-address\"` must match the regex pattern #> \"^[^@]+@[^@]+\\\\.[^@]+$\" #> ✖ \"not-an-email-address\" fails the check."},{"path":"https://stbl.wrangle.zone/dev/reference/specify_cls.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a specified stabilizer function — specify_cls","title":"Create a specified stabilizer function — specify_cls","text":"Create specified stabilizer function","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/specify_cls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a specified stabilizer function — specify_cls","text":"","code":"specify_cls(stabilizer, ..., scalar = FALSE, call = rlang::caller_env())"},{"path":"https://stbl.wrangle.zone/dev/reference/specify_cls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a specified stabilizer function — specify_cls","text":"stabilizer (length-1 character) Name stabilizer function call. ... Arguments include call stabilizer function. scalar (length-1 logical) Whether call scalar version stabilizer. call (environment) environment use parent generated function. Defaults caller's environment.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/specify_cls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a specified stabilizer function — specify_cls","text":"function class \"stbl_specified_fn\" calls specified stabilizer function provided arguments. generated function also accept ... additional arguments pass stabilizer function. can copy/paste body resulting function want provide additional context functionality.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/specify_fct.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a specified factor stabilizer function — specify_fct","title":"Create a specified factor stabilizer function — specify_fct","text":"specify_fct() creates function call stabilize_fct() provided arguments. specify_fct_scalar() creates function call stabilize_fct_scalar() provided arguments..","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/specify_fct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a specified factor stabilizer function — specify_fct","text":"","code":"specify_fct(...)  specify_fct_scalar(...)"},{"path":"https://stbl.wrangle.zone/dev/reference/specify_fct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a specified factor stabilizer function — specify_fct","text":"... Arguments passed stabilize_fct, stabilize_fct_scalar levels (character) Expected levels. NULL (default), levels computed base::factor(). allow_na (length-1 logical) NA values ok? allow_null (length-1 logical) NULL acceptable value? min_size (length-1 integer) minimum size object. Object size tested using vctrs::vec_size(). max_size (length-1 integer) maximum size object. Object size tested using vctrs::vec_size(). to_na (character) Values convert NA. allow_zero_length (length-1 logical) zero-length vectors acceptable?","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/specify_fct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a specified factor stabilizer function — specify_fct","text":"function class \"stbl_specified_fn\" calls stabilize_fct() stabilize_fct_scalar() provided arguments. generated function also accept ... additional arguments pass stabilize_fct() stabilize_fct_scalar(). can copy/paste body resulting function want provide additional context functionality.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/specify_fct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a specified factor stabilizer function — specify_fct","text":"","code":"stabilize_lowercase_letter <- specify_fct(levels = letters) stabilize_lowercase_letter(c(\"s\", \"t\", \"b\", \"l\")) #> [1] s t b l #> Levels: a b c d e f g h i j k l m n o p q r s t u v w x y z try(stabilize_lowercase_letter(\"A\")) #> Error in eval(expr, envir) :  #>   All values of `\"A\"` must be present in `levels` or `to_na`. #> ℹ Disallowed values: A #> ℹ Allowed values: a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, …, y, #>   and z"},{"path":"https://stbl.wrangle.zone/dev/reference/stabilize_arg.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensure an argument meets expectations — stabilize_arg","title":"Ensure an argument meets expectations — stabilize_arg","text":"stabilize_arg() used functions stabilize_int(). Use stabilize_arg() type-specific functions work use case, still like check things like size whether argument NULL. stabilize_arg_scalar() optimized check length-1 vectors.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/stabilize_arg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensure an argument meets expectations — stabilize_arg","text":"","code":"stabilize_arg(   x,   ...,   allow_null = TRUE,   allow_na = TRUE,   min_size = NULL,   max_size = NULL,   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )  stabilize_arg_scalar(   x,   ...,   allow_null = TRUE,   allow_zero_length = TRUE,   allow_na = TRUE,   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )"},{"path":"https://stbl.wrangle.zone/dev/reference/stabilize_arg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensure an argument meets expectations — stabilize_arg","text":"x argument stabilize. ... Arguments passed methods. allow_null (length-1 logical) NULL acceptable value? allow_na (length-1 logical) NA values ok? min_size (length-1 integer) minimum size object. Object size tested using vctrs::vec_size(). max_size (length-1 integer) maximum size object. Object size tested using vctrs::vec_size(). x_arg (length-1 character) argument name x. automatic value work cases, pass higher-level functions make error messages clearer unexported functions. call (environment) execution environment mention source error messages. x_class (length-1 character) class name x use error messages. Use remove special class x checking coercion, want error message match original class. allow_zero_length (length-1 logical) zero-length vectors acceptable?","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/stabilize_arg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensure an argument meets expectations — stabilize_arg","text":"x, unless one checks fails.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/stabilize_arg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ensure an argument meets expectations — stabilize_arg","text":"","code":"wrapper <- function(this_arg, ...) {   stabilize_arg(this_arg, ...) } wrapper(1) #> [1] 1 wrapper(NULL) #> NULL wrapper(NA) #> [1] NA try(wrapper(NULL, allow_null = FALSE)) #> Error in wrapper(NULL, allow_null = FALSE) :  #>   `this_arg` must not be <NULL>. try(wrapper(NA, allow_na = FALSE)) #> Error in wrapper(NA, allow_na = FALSE) :  #>   `this_arg` must not contain NA values. #> • NA locations: 1 try(wrapper(1, min_size = 2)) #> Error in wrapper(1, min_size = 2) :  #>   `this_arg` must have size >= 2. #> ✖ 1 is too small. try(wrapper(1:10, max_size = 5)) #> Error in wrapper(1:10, max_size = 5) :  #>   `this_arg` must have size <= 5. #> ✖ 10 is too big. stabilize_arg_scalar(\"a\") #> [1] \"a\" stabilize_arg_scalar(1L) #> [1] 1 try(stabilize_arg_scalar(1:10)) #> Error in eval(expr, envir) :  #>   `1:10` must be a single <integer>. #> ✖ `1:10` has 10 values."},{"path":"https://stbl.wrangle.zone/dev/reference/stabilize_chr.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensure a character argument meets expectations — stabilize_chr","title":"Ensure a character argument meets expectations — stabilize_chr","text":"to_chr() checks whether argument can coerced character without losing information, returning silently . Otherwise informative error message signaled. stabilize_chr() can check details argument, slower to_chr(). stabilize_chr_scalar() to_chr_scalar() optimized check length-1 character vectors.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/stabilize_chr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensure a character argument meets expectations — stabilize_chr","text":"","code":"stabilize_chr(   x,   ...,   allow_null = TRUE,   allow_na = TRUE,   min_size = NULL,   max_size = NULL,   regex = NULL,   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )  stabilize_chr_scalar(   x,   ...,   allow_null = TRUE,   allow_zero_length = TRUE,   allow_na = TRUE,   regex = NULL,   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )  to_chr(   x,   ...,   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )  # S3 method for class '`NULL`' to_chr(x, ..., allow_null = TRUE, x_arg = caller_arg(x), call = caller_env())  to_chr_scalar(   x,   ...,   allow_null = TRUE,   allow_zero_length = TRUE,   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )"},{"path":"https://stbl.wrangle.zone/dev/reference/stabilize_chr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensure a character argument meets expectations — stabilize_chr","text":"x argument stabilize. ... Arguments passed methods. allow_null (length-1 logical) NULL acceptable value? allow_na (length-1 logical) NA values ok? min_size (length-1 integer) minimum size object. Object size tested using vctrs::vec_size(). max_size (length-1 integer) maximum size object. Object size tested using vctrs::vec_size(). regex (character, list, stringr_pattern) One optional regular expressions test values x. can character vector, list character vectors, pattern object {stringr} package (e.g., stringr::fixed(\".b\")). default error message non-matching values include pattern (see regex_must_match()). provide custom message, supply named character vector value regex pattern name message displayed. check pattern matched, attach negate attribute set TRUE. complex regex pattern throws error, try installing stringi package. x_arg (length-1 character) argument name x. automatic value work cases, pass higher-level functions make error messages clearer unexported functions. call (environment) execution environment mention source error messages. x_class (length-1 character) class name x use error messages. Use remove special class x checking coercion, want error message match original class. allow_zero_length (length-1 logical) zero-length vectors acceptable?","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/stabilize_chr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensure a character argument meets expectations — stabilize_chr","text":"argument character vector.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/stabilize_chr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ensure a character argument meets expectations — stabilize_chr","text":"functions two important differences base::.character(): lists data.frames coerced character. base R, objects coerced character representations elements. example, .character(list(1:3)) returns \"1:10\". unlikely event expected behavior, use .character() instead. NULL values can rejected part call function (allow_null = FALSE).","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/stabilize_chr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ensure a character argument meets expectations — stabilize_chr","text":"","code":"to_chr(\"a\") #> [1] \"a\" to_chr(letters) #>  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" #> [20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\" to_chr(1:10) #>  [1] \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\" to_chr(1 + 0i) #> [1] \"1+0i\" to_chr(NULL) #> NULL try(to_chr(NULL, allow_null = FALSE)) #> Error in eval(expr, envir) : `NULL` must not be <NULL>.  to_chr_scalar(\"a\") #> [1] \"a\" try(to_chr_scalar(letters)) #> Error in eval(expr, envir) :  #>   `letters` must be a single <character>. #> ✖ `letters` has 26 values.  stabilize_chr(letters) #>  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" #> [20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\" stabilize_chr(1:10) #>  [1] \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\" stabilize_chr(NULL) #> NULL try(stabilize_chr(NULL, allow_null = FALSE)) #> Error in eval(expr, envir) : `NULL` must not be <NULL>. try(stabilize_chr(c(\"a\", NA), allow_na = FALSE)) #> Error in eval(expr, envir) :  #>   `c(\"a\", NA)` must not contain NA values. #> • NA locations: 2 try(stabilize_chr(letters, min_size = 50)) #> Error in eval(expr, envir) : `letters` must have size >= 50. #> ✖ 26 is too small. try(stabilize_chr(letters, max_size = 20)) #> Error in eval(expr, envir) : `letters` must have size <= 20. #> ✖ 26 is too big. try(stabilize_chr(c(\"hide\", \"find\", \"find\", \"hide\"), regex = \"hide\")) #> Error in eval(expr, envir) :  #>   `c(\"hide\", \"find\", \"find\", \"hide\")` must match the regex pattern \"hide\" #> ✖ Some values fail the check. #> • Locations: 2 and 3 #> • Values: find and find  stabilize_chr_scalar(TRUE) #> [1] \"TRUE\" stabilize_chr_scalar(\"TRUE\") #> [1] \"TRUE\" try(stabilize_chr_scalar(c(TRUE, FALSE, TRUE))) #> Error in eval(expr, envir) :  #>   `c(TRUE, FALSE, TRUE)` must be a single <character>. #> ✖ `c(TRUE, FALSE, TRUE)` has 3 values. stabilize_chr_scalar(NULL) #> NULL try(stabilize_chr_scalar(NULL, allow_null = FALSE)) #> Error in eval(expr, envir) : `NULL` must not be <NULL>."},{"path":"https://stbl.wrangle.zone/dev/reference/stabilize_dbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensure a double argument meets expectations — stabilize_dbl","title":"Ensure a double argument meets expectations — stabilize_dbl","text":"to_dbl() checks whether argument can coerced double without losing information, returning silently . Otherwise informative error message signaled. stabilize_dbl() can check details argument, slower to_dbl(). stabilize_dbl_scalar() to_dbl_scalar() optimized check length-1 double vectors.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/stabilize_dbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensure a double argument meets expectations — stabilize_dbl","text":"","code":"stabilize_dbl(   x,   ...,   allow_null = TRUE,   allow_na = TRUE,   coerce_character = TRUE,   coerce_factor = TRUE,   min_size = NULL,   max_size = NULL,   min_value = NULL,   max_value = NULL,   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )  stabilize_dbl_scalar(   x,   ...,   allow_null = TRUE,   allow_zero_length = TRUE,   allow_na = TRUE,   coerce_character = TRUE,   coerce_factor = TRUE,   min_value = NULL,   max_value = NULL,   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )  to_dbl(   x,   ...,   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )  # S3 method for class '`NULL`' to_dbl(x, ..., allow_null = TRUE, x_arg = caller_arg(x), call = caller_env())  # S3 method for class 'character' to_dbl(   x,   ...,   coerce_character = TRUE,   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )  # S3 method for class 'factor' to_dbl(   x,   ...,   coerce_factor = TRUE,   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )  to_dbl_scalar(   x,   ...,   allow_null = TRUE,   allow_zero_length = TRUE,   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )"},{"path":"https://stbl.wrangle.zone/dev/reference/stabilize_dbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensure a double argument meets expectations — stabilize_dbl","text":"x argument stabilize. ... Arguments passed methods. allow_null (length-1 logical) NULL acceptable value? allow_na (length-1 logical) NA values ok? coerce_character (length-1 logical) character vectors \"1\" \"2.0\" considered numeric-ish? coerce_factor (length-1 logical) factors values \"1\" \"2.0\" considered numeric-ish? Note package uses character value factor, .integer() .double() use integer index factor. min_size (length-1 integer) minimum size object. Object size tested using vctrs::vec_size(). max_size (length-1 integer) maximum size object. Object size tested using vctrs::vec_size(). min_value (length-1 numeric) lowest allowed value x. NULL (default) values checked. max_value (length-1 numeric) highest allowed value x. NULL (default) values checked. x_arg (length-1 character) argument name x. automatic value work cases, pass higher-level functions make error messages clearer unexported functions. call (environment) execution environment mention source error messages. x_class (length-1 character) class name x use error messages. Use remove special class x checking coercion, want error message match original class. allow_zero_length (length-1 logical) zero-length vectors acceptable?","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/stabilize_dbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensure a double argument meets expectations — stabilize_dbl","text":"argument double.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/stabilize_dbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ensure a double argument meets expectations — stabilize_dbl","text":"","code":"to_dbl(1:10) #>  [1]  1  2  3  4  5  6  7  8  9 10 to_dbl(\"1.1\") #> [1] 1.1 to_dbl(1 + 0i) #> [1] 1 to_dbl(NULL) #> NULL try(to_dbl(\"a\")) #> Error in eval(expr, envir) :  #>   `\"a\"` <character> must be coercible to <double> #> ✖ Can't convert some values due to incompatible values. #> • Locations: 1 try(to_dbl(\"1.1\", coerce_character = FALSE)) #> Error in eval(expr, envir) :  #>   Can't coerce `\"1.1\"` <character> to <double>.  to_dbl_scalar(\"1.1\") #> [1] 1.1 try(to_dbl_scalar(1:10)) #> Error in eval(expr, envir) :  #>   `1:10` must be a single <numeric>. #> ✖ `1:10` has 10 values.  stabilize_dbl(1:10) #>  [1]  1  2  3  4  5  6  7  8  9 10 stabilize_dbl(\"1.1\") #> [1] 1.1 stabilize_dbl(1 + 0i) #> [1] 1 stabilize_dbl(NULL) #> NULL try(stabilize_dbl(NULL, allow_null = FALSE)) #> Error in eval(expr, envir) : `NULL` must not be <NULL>. try(stabilize_dbl(c(1.1, NA), allow_na = FALSE)) #> Error in eval(expr, envir) :  #>   `c(1.1, NA)` must not contain NA values. #> • NA locations: 2 try(stabilize_dbl(letters)) #> Error in eval(expr, envir) :  #>   `letters` <character> must be coercible to <double> #> ✖ Can't convert some values due to incompatible values. #> • Locations: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, …, #>   25, and 26 try(stabilize_dbl(\"1.1\", coerce_character = FALSE)) #> Error in eval(expr, envir) :  #>   Can't coerce `\"1.1\"` <character> to <double>. try(stabilize_dbl(factor(c(\"1.1\", \"a\")))) #> Error in eval(expr, envir) :  #>   `factor(c(\"1.1\", \"a\"))` <factor> must be coercible to <double> #> ✖ Can't convert some values due to incompatible values. #> • Locations: 2 try(stabilize_dbl(factor(\"1.1\"), coerce_factor = FALSE)) #> Error in eval(expr, envir) :  #>   Can't coerce `factor(\"1.1\")` <factor> to <double>. try(stabilize_dbl(1:10, min_value = 3.5)) #> Error in eval(expr, envir) :  #>   ! Values of `1:10` must be >= 3.5. #> ✖ Values are too low at locations 1, 2, and 3. try(stabilize_dbl(1:10, max_value = 7.5)) #> Error in eval(expr, envir) :  #>   ! Values of `1:10` must be <= 7.5. #> ✖ Values are too high at locations 8, 9, and 10.  stabilize_dbl_scalar(1.0) #> [1] 1 stabilize_dbl_scalar(\"1.1\") #> [1] 1.1 try(stabilize_dbl_scalar(1:10)) #> Error in eval(expr, envir) :  #>   `1:10` must be a single <numeric>. #> ✖ `1:10` has 10 values. stabilize_dbl_scalar(NULL) #> NULL try(stabilize_dbl_scalar(NULL, allow_null = FALSE)) #> Error in eval(expr, envir) : `NULL` must not be <NULL>."},{"path":"https://stbl.wrangle.zone/dev/reference/stabilize_fct.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensure a factor argument meets expectations — stabilize_fct","title":"Ensure a factor argument meets expectations — stabilize_fct","text":"to_fct() checks whether argument can coerced factor without losing information, returning silently . Otherwise informative error message signaled. stabilize_fct() can check details argument, slower to_fct(). stabilize_fct_scalar() to_fct_scalar() optimized check length-1 factors.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/stabilize_fct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensure a factor argument meets expectations — stabilize_fct","text":"","code":"stabilize_fct(   x,   ...,   allow_null = TRUE,   allow_na = TRUE,   min_size = NULL,   max_size = NULL,   levels = NULL,   to_na = character(),   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )  stabilize_fct_scalar(   x,   ...,   allow_null = TRUE,   allow_zero_length = TRUE,   allow_na = TRUE,   levels = NULL,   to_na = character(),   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )  to_fct(   x,   ...,   levels = NULL,   to_na = character(),   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )  # S3 method for class '`NULL`' to_fct(x, ..., allow_null = TRUE, x_arg = caller_arg(x), call = caller_env())  to_fct_scalar(   x,   ...,   allow_null = TRUE,   allow_zero_length = TRUE,   levels = NULL,   to_na = character(),   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )"},{"path":"https://stbl.wrangle.zone/dev/reference/stabilize_fct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensure a factor argument meets expectations — stabilize_fct","text":"x argument stabilize. ... Arguments passed methods. allow_null (length-1 logical) NULL acceptable value? allow_na (length-1 logical) NA values ok? min_size (length-1 integer) minimum size object. Object size tested using vctrs::vec_size(). max_size (length-1 integer) maximum size object. Object size tested using vctrs::vec_size(). levels (character) Expected levels. NULL (default), levels computed base::factor(). to_na (character) Values convert NA. x_arg (length-1 character) argument name x. automatic value work cases, pass higher-level functions make error messages clearer unexported functions. call (environment) execution environment mention source error messages. x_class (length-1 character) class name x use error messages. Use remove special class x checking coercion, want error message match original class. allow_zero_length (length-1 logical) zero-length vectors acceptable?","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/stabilize_fct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensure a factor argument meets expectations — stabilize_fct","text":"argument factor.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/stabilize_fct.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ensure a factor argument meets expectations — stabilize_fct","text":"functions important differences base::.factor() base::factor(): Values never silently coerced NA unless explicitly supplied to_na argument. NULL values can rejected part call function (allow_null = FALSE).","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/stabilize_fct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ensure a factor argument meets expectations — stabilize_fct","text":"","code":"to_fct(\"a\") #> [1] a #> Levels: a to_fct(1:10) #>  [1] 1  2  3  4  5  6  7  8  9  10 #> Levels: 1 2 3 4 5 6 7 8 9 10 to_fct(NULL) #> NULL try(to_fct(letters[1:5], levels = c(\"a\", \"c\"), to_na = \"b\")) #> Error in eval(expr, envir) :  #>   All values of `letters[1:5]` must be present in `levels` or `to_na`. #> ℹ Disallowed values: d and e #> ℹ Allowed values: a and c #> ℹ Values that will be converted to `NA`: b  to_fct_scalar(\"a\") #> [1] a #> Levels: a try(to_fct_scalar(letters)) #> Error in eval(expr, envir) :  #>   `letters` must be a single <factor>. #> ✖ `letters` has 26 values.  stabilize_fct(letters) #>  [1] a b c d e f g h i j k l m n o p q r s t u v w x y z #> Levels: a b c d e f g h i j k l m n o p q r s t u v w x y z try(stabilize_fct(NULL, allow_null = FALSE)) #> Error in eval(expr, envir) : `NULL` must not be <NULL>. try(stabilize_fct(c(\"a\", NA), allow_na = FALSE)) #> Error in eval(expr, envir) :  #>   `c(\"a\", NA)` must not contain NA values. #> • NA locations: 2 try(stabilize_fct(c(\"a\", \"b\", \"c\"), min_size = 5)) #> Error in eval(expr, envir) :  #>   `c(\"a\", \"b\", \"c\")` must have size >= 5. #> ✖ 3 is too small. try(stabilize_fct(c(\"a\", \"b\", \"c\"), max_size = 2)) #> Error in eval(expr, envir) :  #>   `c(\"a\", \"b\", \"c\")` must have size <= 2. #> ✖ 3 is too big.  stabilize_fct_scalar(\"a\") #> [1] a #> Levels: a try(stabilize_fct_scalar(letters)) #> Error in eval(expr, envir) :  #>   `letters` must be a single <factor>. #> ✖ `letters` has 26 values. try(stabilize_fct_scalar(\"c\", levels = c(\"a\", \"b\"))) #> Error in eval(expr, envir) :  #>   All values of `\"c\"` must be present in `levels` or `to_na`. #> ℹ Disallowed values: c #> ℹ Allowed values: a and b"},{"path":"https://stbl.wrangle.zone/dev/reference/stabilize_int.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensure an integer argument meets expectations — stabilize_int","title":"Ensure an integer argument meets expectations — stabilize_int","text":"to_int() checks whether argument can coerced integer without losing information, returning silently . Otherwise informative error message signaled. stabilize_int() can check details argument, slower to_int(). stabilize_int_scalar() to_int_scalar() optimized check length-1 integer vectors.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/stabilize_int.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensure an integer argument meets expectations — stabilize_int","text":"","code":"stabilize_int(   x,   ...,   allow_null = TRUE,   allow_na = TRUE,   coerce_character = TRUE,   coerce_factor = TRUE,   min_size = NULL,   max_size = NULL,   min_value = NULL,   max_value = NULL,   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )  stabilize_int_scalar(   x,   ...,   allow_null = TRUE,   allow_zero_length = TRUE,   allow_na = TRUE,   coerce_character = TRUE,   coerce_factor = TRUE,   min_value = NULL,   max_value = NULL,   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )  to_int(   x,   ...,   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )  # S3 method for class '`NULL`' to_int(x, ..., allow_null = TRUE, x_arg = caller_arg(x), call = caller_env())  # S3 method for class 'character' to_int(   x,   ...,   coerce_character = TRUE,   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )  # S3 method for class 'factor' to_int(   x,   ...,   coerce_factor = TRUE,   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )  to_int_scalar(   x,   ...,   allow_null = TRUE,   allow_zero_length = TRUE,   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )"},{"path":"https://stbl.wrangle.zone/dev/reference/stabilize_int.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensure an integer argument meets expectations — stabilize_int","text":"x argument stabilize. ... Arguments passed methods. allow_null (length-1 logical) NULL acceptable value? allow_na (length-1 logical) NA values ok? coerce_character (length-1 logical) character vectors \"1\" \"2.0\" considered numeric-ish? coerce_factor (length-1 logical) factors values \"1\" \"2.0\" considered numeric-ish? Note package uses character value factor, .integer() .double() use integer index factor. min_size (length-1 integer) minimum size object. Object size tested using vctrs::vec_size(). max_size (length-1 integer) maximum size object. Object size tested using vctrs::vec_size(). min_value (length-1 numeric) lowest allowed value x. NULL (default) values checked. max_value (length-1 numeric) highest allowed value x. NULL (default) values checked. x_arg (length-1 character) argument name x. automatic value work cases, pass higher-level functions make error messages clearer unexported functions. call (environment) execution environment mention source error messages. x_class (length-1 character) class name x use error messages. Use remove special class x checking coercion, want error message match original class. allow_zero_length (length-1 logical) zero-length vectors acceptable?","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/stabilize_int.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensure an integer argument meets expectations — stabilize_int","text":"argument integer.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/stabilize_int.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ensure an integer argument meets expectations — stabilize_int","text":"","code":"to_int(1:10) #>  [1]  1  2  3  4  5  6  7  8  9 10 to_int(\"1\") #> [1] 1 to_int(1 + 0i) #> [1] 1 to_int(NULL) #> NULL try(to_int(c(1, 2, 3.1, 4, 5.2))) #> Error in eval(expr, envir) :  #>   Can't convert from `c(1, 2, 3.1, 4, 5.2)` <double> to <integer> due to loss of precision. #> • Locations: 3, 5 try(to_int(\"1\", coerce_character = FALSE)) #> Error in eval(expr, envir) :  #>   Can't coerce `\"1\"` <character> to <integer>. try(to_int(c(\"1\", \"2\", \"3.1\", \"4\", \"5.2\"))) #> Error in eval(expr, envir) :  #>   `c(\"1\", \"2\", \"3.1\", \"4\", \"5.2\")` <character> must be coercible to #> <integer> #> ✖ Can't convert some values due to loss of precision. #> • Locations: 3 and 5  to_int_scalar(\"1\") #> [1] 1 try(to_int_scalar(1:10)) #> Error in eval(expr, envir) :  #>   `1:10` must be a single <integer>. #> ✖ `1:10` has 10 values.  stabilize_int(1:10) #>  [1]  1  2  3  4  5  6  7  8  9 10 stabilize_int(\"1\") #> [1] 1 stabilize_int(1 + 0i) #> [1] 1 stabilize_int(NULL) #> NULL try(stabilize_int(NULL, allow_null = FALSE)) #> Error in eval(expr, envir) : `NULL` must not be <NULL>. try(stabilize_int(c(1, NA), allow_na = FALSE)) #> Error in eval(expr, envir) :  #>   `c(1, NA)` must not contain NA values. #> • NA locations: 2 try(stabilize_int(letters)) #> Error in eval(expr, envir) :  #>   `letters` <character> must be coercible to <integer> #> ✖ Can't convert some values due to incompatible values. #> • Locations: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, …, #>   25, and 26 try(stabilize_int(\"1\", coerce_character = FALSE)) #> Error in eval(expr, envir) :  #>   Can't coerce `\"1\"` <character> to <integer>. try(stabilize_int(factor(c(\"1\", \"a\")))) #> Error in eval(expr, envir) :  #>   `factor(c(\"1\", \"a\"))` <factor> must be coercible to <integer> #> ✖ Can't convert some values due to incompatible values. #> • Locations: 2 try(stabilize_int(factor(\"1\"), coerce_factor = FALSE)) #> Error in eval(expr, envir) :  #>   Can't coerce `factor(\"1\")` <factor> to <integer>. try(stabilize_int(1:10, min_value = 3)) #> Error in eval(expr, envir) :  #>   ! Values of `1:10` must be >= 3. #> ✖ Values are too low at locations 1 and 2. try(stabilize_int(1:10, max_value = 7)) #> Error in eval(expr, envir) :  #>   ! Values of `1:10` must be <= 7. #> ✖ Values are too high at locations 8, 9, and 10.  stabilize_int_scalar(1L) #> [1] 1 stabilize_int_scalar(\"1\") #> [1] 1 try(stabilize_int_scalar(1:10)) #> Error in eval(expr, envir) :  #>   `1:10` must be a single <integer>. #> ✖ `1:10` has 10 values. stabilize_int_scalar(NULL) #> NULL try(stabilize_int_scalar(NULL, allow_null = FALSE)) #> Error in eval(expr, envir) : `NULL` must not be <NULL>."},{"path":"https://stbl.wrangle.zone/dev/reference/stabilize_lgl.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensure a logical argument meets expectations — stabilize_lgl","title":"Ensure a logical argument meets expectations — stabilize_lgl","text":"to_lgl() checks whether argument can coerced logical without losing information, returning silently . Otherwise informative error message signaled. stabilize_lgl() can check details argument, slower to_lgl(). stabilize_lgl_scalar() to_lgl_scalar() optimized check length-1 logical vectors.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/stabilize_lgl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensure a logical argument meets expectations — stabilize_lgl","text":"","code":"stabilize_lgl(   x,   ...,   allow_null = TRUE,   allow_na = TRUE,   min_size = NULL,   max_size = NULL,   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )  stabilize_lgl_scalar(   x,   ...,   allow_null = TRUE,   allow_zero_length = TRUE,   allow_na = TRUE,   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )  to_lgl(   x,   ...,   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )  # S3 method for class '`NULL`' to_lgl(x, ..., allow_null = TRUE, x_arg = caller_arg(x), call = caller_env())  to_lgl_scalar(   x,   ...,   allow_null = TRUE,   allow_zero_length = TRUE,   x_arg = caller_arg(x),   call = caller_env(),   x_class = object_type(x) )"},{"path":"https://stbl.wrangle.zone/dev/reference/stabilize_lgl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensure a logical argument meets expectations — stabilize_lgl","text":"x argument stabilize. ... Arguments passed methods. allow_null (length-1 logical) NULL acceptable value? allow_na (length-1 logical) NA values ok? min_size (length-1 integer) minimum size object. Object size tested using vctrs::vec_size(). max_size (length-1 integer) maximum size object. Object size tested using vctrs::vec_size(). x_arg (length-1 character) argument name x. automatic value work cases, pass higher-level functions make error messages clearer unexported functions. call (environment) execution environment mention source error messages. x_class (length-1 character) class name x use error messages. Use remove special class x checking coercion, want error message match original class. allow_zero_length (length-1 logical) zero-length vectors acceptable?","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/stabilize_lgl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensure a logical argument meets expectations — stabilize_lgl","text":"argument logical vector.","code":""},{"path":"https://stbl.wrangle.zone/dev/reference/stabilize_lgl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ensure a logical argument meets expectations — stabilize_lgl","text":"","code":"to_lgl(TRUE) #> [1] TRUE to_lgl(\"TRUE\") #> [1] TRUE to_lgl(1:10) #>  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE to_lgl(NULL) #> NULL try(to_lgl(NULL, allow_null = FALSE)) #> Error in eval(expr, envir) : `NULL` must not be <NULL>. try(to_lgl(letters)) #> Error in eval(expr, envir) :  #>   `letters` <character> must be coercible to <logical> #> ✖ Can't convert some values due to incompatible values. #> • Locations: 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, …, #>   25, and 26 try(to_lgl(list(TRUE))) #> [1] TRUE  to_lgl_scalar(\"TRUE\") #> [1] TRUE try(to_lgl_scalar(c(TRUE, FALSE))) #> Error in eval(expr, envir) :  #>   `c(TRUE, FALSE)` must be a single <logical>. #> ✖ `c(TRUE, FALSE)` has 2 values.  stabilize_lgl(c(TRUE, FALSE, TRUE)) #> [1]  TRUE FALSE  TRUE stabilize_lgl(\"true\") #> [1] TRUE stabilize_lgl(NULL) #> NULL try(stabilize_lgl(NULL, allow_null = FALSE)) #> Error in eval(expr, envir) : `NULL` must not be <NULL>. try(stabilize_lgl(c(TRUE, NA), allow_na = FALSE)) #> Error in eval(expr, envir) :  #>   `c(TRUE, NA)` must not contain NA values. #> • NA locations: 2 try(stabilize_lgl(letters)) #> Error in eval(expr, envir) :  #>   `letters` <character> must be coercible to <logical> #> ✖ Can't convert some values due to incompatible values. #> • Locations: 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, …, #>   25, and 26 try(stabilize_lgl(c(TRUE, FALSE, TRUE), min_size = 5)) #> Error in eval(expr, envir) :  #>   `c(TRUE, FALSE, TRUE)` must have size >= 5. #> ✖ 3 is too small. try(stabilize_lgl(c(TRUE, FALSE, TRUE), max_size = 2)) #> Error in eval(expr, envir) :  #>   `c(TRUE, FALSE, TRUE)` must have size <= 2. #> ✖ 3 is too big.  stabilize_lgl_scalar(TRUE) #> [1] TRUE stabilize_lgl_scalar(\"TRUE\") #> [1] TRUE try(stabilize_lgl_scalar(c(TRUE, FALSE, TRUE))) #> Error in eval(expr, envir) :  #>   `c(TRUE, FALSE, TRUE)` must be a single <logical>. #> ✖ `c(TRUE, FALSE, TRUE)` has 3 values. stabilize_lgl_scalar(NULL) #> NULL try(stabilize_lgl_scalar(NULL, allow_null = FALSE)) #> Error in eval(expr, envir) : `NULL` must not be <NULL>."},{"path":"https://stbl.wrangle.zone/dev/reference/stbl-package.html","id":null,"dir":"Reference","previous_headings":"","what":"stbl: Stabilize Function Arguments — stbl-package","title":"stbl: Stabilize Function Arguments — stbl-package","text":"set consistent, opinionated functions quickly check function arguments, coerce desired configuration, deliver informative error messages possible.","code":""},{"path":[]},{"path":"https://stbl.wrangle.zone/dev/reference/stbl-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"stbl: Stabilize Function Arguments — stbl-package","text":"Maintainer: Jon Harmon jonthegeek@gmail.com (ORCID) [copyright holder]","code":""},{"path":[]},{"path":"https://stbl.wrangle.zone/dev/news/index.html","id":"new-features-development-version","dir":"Changelog","previous_headings":"","what":"New features","title":"stbl (development version)","text":"New condition functions: pkg_abort() throws errors standardized, opinionated collection classes, expect_pkg_error_classes() checks error expected set classes thrown (#136). New specification functions: specify_*() creates “stbl-specified function” (class \"stbl_specified_fn\"), call corresponding stabilize_*() function arguments pre-filled. example, stabilize_email <- specify_chr(regex = \"^[^@]+@[^@]+\\\\.[^@]+$\") creates stabilize_email() function calls stabilize_chr() regex = \"^[^@]+@[^@]+\\\\.[^@]+$\", used stabilize email addresses (#147, #150).","code":""},{"path":"https://stbl.wrangle.zone/dev/news/index.html","id":"potential-breaking-changes-development-version","dir":"Changelog","previous_headings":"","what":"Potential breaking changes","title":"stbl (development version)","text":"Several conditions formerly included subclass “stbl-error-must” longer include subclass. occurs “stbl-error-must” specific subclass (.e., specific subclass already included), therefore impact code (#136).","code":""},{"path":"https://stbl.wrangle.zone/dev/news/index.html","id":"other-changes-development-version","dir":"Changelog","previous_headings":"","what":"Other changes","title":"stbl (development version)","text":"Revised “Getting started stbl” vignette clarify happens step (#139, #143, #144).","code":""},{"path":"https://stbl.wrangle.zone/dev/news/index.html","id":"stbl-020","dir":"Changelog","previous_headings":"","what":"stbl 0.2.0","title":"stbl 0.2.0","text":"CRAN release: 2025-09-16","code":""},{"path":"https://stbl.wrangle.zone/dev/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"New features","title":"stbl 0.2.0","text":"New predicate functions check object can safely coerced specific type. is_*_ish() family (is_chr_ish(), is_dbl_ish(), is_fct_ish(), is_int_ish(), is_lgl_ish()) checks entire object . are_*_ish() family (are_chr_ish(), are_dbl_ish(), are_fct_ish(), are_int_ish(), are_lgl_ish()) checks element vector individually (#23, #93). New functions working doubles available: to_dbl(), to_dbl_scalar(), stabilize_dbl(), stabilize_dbl_scalar() (#23). stabilize_chr() now accepts patterns stringr::regex(), stringr::fixed(), stringr::coll() (#87), can generate informative error messages regex failures via new regex_must_match() regex_must_not_match() helper functions (#52, #85, #86, #89).","code":""},{"path":"https://stbl.wrangle.zone/dev/news/index.html","id":"minor-improvements-and-fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and fixes","title":"stbl 0.2.0","text":"Error messages now clearer standardized throughout package (#95). to_*() functions now consistently flatten list-like inputs information lost process (#128). to_fct() now lists allowed values error message value expected set, making easier debug (#67). to_lgl() now coerces character representations numbers (e.g., “0” “1”) FALSE TRUE respectively (#30).","code":""},{"path":"https://stbl.wrangle.zone/dev/news/index.html","id":"documentation-0-2-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"stbl 0.2.0","text":"purpose vision package now clearly described documentation (#56, #77). New vignette(\"stbl\") provides overview package functions (#42).","code":""},{"path":"https://stbl.wrangle.zone/dev/news/index.html","id":"stbl-011","dir":"Changelog","previous_headings":"","what":"stbl 0.1.1","title":"stbl 0.1.1","text":"CRAN release: 2024-05-23 Update formatting DESCRIPTION examples.","code":""},{"path":"https://stbl.wrangle.zone/dev/news/index.html","id":"stbl-010","dir":"Changelog","previous_headings":"","what":"stbl 0.1.0","title":"stbl 0.1.0","text":"Initial CRAN submission.","code":""}]
